{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/Profiles/FollowButton.tsx","features/Profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationsErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/options/categoryOptions.ts","app/common/form/MySelectInput.tsx","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/Profiles/ProfilePhotos.tsx","features/Profiles/EditProfileForm.tsx","features/Profiles/ProfileAbout.tsx","features/Profiles/ProfileFollowings.tsx","features/Profiles/ProfileActivites.tsx","features/Profiles/ProfileContent.tsx","features/Profiles/ProfileHeader.tsx","features/Profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/common/util/hooks.ts","features/users/RegisterSuccess.tsx","features/users/ConfirmEmail.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","startsWith","userStore","logout","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","fbLogin","accessToken","refreshToken","verifyEmail","email","resendEmailConfirm","ghLogin","code","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","editProfile","profile","updateFollowing","listFollowings","predicate","getUserActivity","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ProfileFormValues","bio","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","runInAction","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","deleteActivity","createActivity","attendee","newActivity","updateActivity","updatedActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","URLSearchParams","toString","toISOString","ProfileStore","loadingProfile","uploading","loadingPhoto","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","updateProfile","setDisplayName","activityStore","followingCount","loadFollowings","loadUserActivites","UserStore","fbAccessToken","fbLoading","githubLoading","refreshTokenTimeout","creds","setToken","startRefreshTokenTimer","modalStore","closeModal","window","localStorage","removeItem","getUser","getFacebookLoginStatus","FB","getLoginStatus","authResponse","facebookLogin","apiLogin","catch","scope","githubLogin","stopRefreshTokenTimer","jwtToken","atob","split","timeout","exp","now","setTimeout","clearTimeout","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","on","comment","createdAt","unshift","stopHubConnectio","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","isLoggedIn","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","name","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","e","preventDefault","handleFollow","str","Card","Description","overflow","textOverflow","length","substring","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Segment","Group","Label","textAlign","marginBottom","basic","marginLeft","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","location","href","includes","Divider","LoadingComponent","Dimmer","MyTextArea","categoryOptions","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","preview","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","guides","viewMode","autoCropArea","background","onInitialized","cropper","files","revokeObjectURL","getCroppedCanvas","toBlob","blop","isCurrentUser","addPhotoMode","setAddPhotoMode","target","settarget","Tab","Pane","itemsPerRow","currentTarget","handleSetMainPhoto","handleDeletePhoto","profileValues","setProfileValues","setEditMode","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","objectFit","Meta","ProfileActivites","menuPosition","Statistic","PrivateRoute","Component","component","rest","useQuery","useLocation","search","success","ConfirmEmail","Status","setStaus","handleConfirmEmailResend","getBody","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","RegisterSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.9ff50100.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2){\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { history } from \"../..\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { PaginatedResult } from \"../models/pagination\";\r\nimport { Profile, ProfileFormValues, UserActivity } from \"../models/profile\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"../stores/store\";\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay)\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers.Authorization = `Bearer ${token}`\r\n    return config;\r\n})\r\n\r\n\r\naxios.interceptors.response.use(async response => {\r\n    if (process.env.NODE_ENV === 'development') await sleep(1000);\r\n    \r\n    const pagination = response.headers['pagination'];\r\n    if (pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>\r\n    }\r\n    return response;\r\n}, (error: AxiosError) => {\r\n    const {data, status, config, headers} = error.response!;\r\n    switch (status) {\r\n        case 400: \r\n            if (typeof data === 'string') {\r\n                toast.error(data);\r\n            }\r\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('/not-found');\r\n            }\r\n            if (data.errors) {\r\n                const modalStateErrors = [];\r\n                for (const key in data.errors){\r\n                    if (data.errors[key]) {\r\n                        modalStateErrors.push(data.errors[key])\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            } else {\r\n                toast.error(data);\r\n            }\r\n            break;\r\n        case 401:\r\n            if (status === 401 && headers['www-authenticate']?.startsWith('Bearer error=\"invalid_token')) {\r\n                store.userStore.logout();\r\n                toast.error('Session expred - Please login again!');\r\n\r\n            }\r\n            \r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n})\r\n\r\nconst responseBody = <T> (response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T> (url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    del: <T> (url: string) => axios.delete<T>(url).then(responseBody),\r\n}\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params}).then(responseBody), \r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\r\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {}),\r\n}\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>('/account'),\r\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user),\r\n    fbLogin: (accessToken: string) => requests\r\n        .post<User>(`/account/fbLogin?accessToken=${accessToken}`, {}),\r\n    refreshToken: () => requests.post<User>('/account/refreshToken', {}), \r\n    verifyEmail: (token: string, email: string) => \r\n        requests.post<void>(`/account/verifyEmail?token=${token}&email=${email}`, {}),\r\n    resendEmailConfirm: (email: string) => \r\n        requests.get(`/account/resendEmailConfirmationLink?email=${email}`),\r\n\r\n    ghLogin: (code: string) => requests.post<User>(`/account/githubLogin/${code}`, {})\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post('photos', formData, {\r\n            headers: {'Content-type': 'multipart/form-data'}\r\n        })\r\n    }, \r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}), \r\n    deletePhoto: (id: string) => requests.del(`photos/${id}`),\r\n    editProfile: (profile: ProfileFormValues) => requests.put<void>(`/profiles/`, profile),\r\n    updateFollowing: (username: string) => requests.post<void>(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate: string) => \r\n        requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    getUserActivity: (username: string, predicate: string) => \r\n    requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n}\r\n\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account, \r\n    Profiles\r\n}\r\n\r\nexport default agent;","import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername: string;\r\n    isCancelled: boolean;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    host?: Profile;\r\n    attendees: Profile[]\r\n  }\r\n\r\n  export class Activity implements Activity {\r\n    constructor(init?: ActivityFormValues) {\r\n      Object.assign(this, init);\r\n    }\r\n  }\r\n\r\n  // eslint-disable-next-line\r\n  export class ActivityFormValues {\r\n    // eslint-disable-next-line\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    // eslint-disable-next-line\r\n    constructor(activity?: ActivityFormValues) {\r\n      if (activity) {\r\n        this.id = activity.id;\r\n        this.title = activity.title;\r\n        this.category = activity.category;\r\n        this.description = activity.description;\r\n        this.date = activity.date;\r\n        this.venue = activity.venue;\r\n        this.city = activity.city;\r\n      }\r\n    }\r\n  }","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    photos?: Photo[];\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n}\r\n\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User){\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}\r\n\r\nexport class ProfileFormValues {\r\n    displayName: string = '';\r\n    bio: string = '';\r\n    constructor(profile : Profile) {\r\n        if (profile) {\r\n            this.bio = profile.bio!;\r\n            this.displayName = profile.displayName;\r\n        }\r\n    }\r\n}\r\n\r\nexport interface UserActivity {\r\n    activityId: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}","import { format } from \"date-fns\";\r\nimport { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ActivityStore {\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = true;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.predicate.keys(), \r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort((a, b) =>\r\n            a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    get groupedActivities() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date = format(activity.date!, 'd MMMM yyyy');\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            }, {} as { [key: string]: Activity[] })\r\n        )\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n        switch (predicate) {\r\n            case 'all': \r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n            this.predicate.delete('startDate');\r\n            this.predicate.set('startDate', value);\r\n            break;\r\n        }\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString())\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        })\r\n        return params;\r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n        \r\n            result.data.forEach(activity => {\r\n                this.setActivity(activity);\r\n            });\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false);\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if (activity) {\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        }\r\n        else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                })\r\n\r\n                this.setLoadingInitial(false);\r\n                return activity;\r\n\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n        if (user) {\r\n            activity.isGoing = activity.attendees!.some(\r\n                a => a.username === user.username\r\n            )\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\r\n        }\r\n        activity.date = new Date(activity.date!)\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUsername = user!.username;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            })\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                if (activity.id) {\r\n                    let updatedActivity = { ...this.getActivity(activity.id), ...activity }\r\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if (this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees =\r\n                        this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\r\n                this.loading = false;\r\n            })\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    cancelActivityToggle = async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false)\r\n        }\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activityRegistry.forEach(activity => {\r\n            activity.attendees.forEach(attendee => {\r\n                if (attendee.username === username) {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile, ProfileFormValues, UserActivity } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile = false; \r\n    uploading = false;\r\n    loading = false;\r\n    loadingPhoto = false;\r\n    followings: Profile[] = [];\r\n    loadingFollowings = false;\r\n    activeTab = 0;\r\n    userActivities : UserActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.activeTab, \r\n            activeTab => {\r\n                if (activeTab === 3 || activeTab === 4) {\r\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\r\n                    this.loadFollowings(predicate);\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true; \r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingProfile = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n                    if (photo.isMain  && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n                this.uploading = false;\r\n            })\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.uploading = false)\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loadingPhoto = true; \r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if ( this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                }\r\n                this.loadingPhoto = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingPhoto = false)\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo:Photo) => {\r\n        this.loadingPhoto = true;\r\n        try {\r\n           await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                if ( this.profile && this.profile.photos) {\r\n                    this.profile.photos = this.profile.photos.filter(p => p.id !== photo.id);\r\n                }\r\n                \r\n                this.loadingPhoto = false;\r\n            })\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingPhoto = false)\r\n        }\r\n    }\r\n\r\n    updateProfile = async (profile: ProfileFormValues) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            await agent.Profiles.editProfile(profile);\r\n            runInAction(() => {\r\n                store.userStore.setDisplayName(profile.displayName);\r\n                if (this.profile) {\r\n                    this.profile.bio = profile.bio;\r\n                    this.profile.displayName = profile.displayName;\r\n                }\r\n                this.loadingProfile = false;\r\n            })\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingProfile = false)\r\n        }\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n                }\r\n                this.followings.forEach(profile => {\r\n                    if (profile.username === username) {\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false)\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n        \r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingFollowings = false)\r\n        }\r\n    }\r\n\r\n    loadUserActivites = async (username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n            const userActivities = await agent.Profiles.getUserActivity(username, predicate!);\r\n            runInAction(() => {\r\n                this.userActivities = userActivities;\r\n                this.loadingActivities = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingActivities = false)\r\n        }\r\n    }\r\n\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n    fbAccessToken: string | null = null;\r\n    fbLoading = false;\r\n    githubLoading = false;\r\n    refreshTokenTimeout: any;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            this.startRefreshTokenTimer(user);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n            \r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            await agent.Account.register(creds);\r\n            history.push(`/account/registerSuccess?email=${creds.email}`);\r\n            store.modalStore.closeModal();\r\n            \r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            store.commonStore.setToken(user.token);\r\n            \r\n            runInAction(() => {\r\n                this.user = user;\r\n            })\r\n            this.startRefreshTokenTimer(user);\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n        if (this.user){\r\n            this.user.image = image;\r\n        } \r\n    }\r\n\r\n    setDisplayName = (displayName: string) => {\r\n        if (this.user) {\r\n            this.user.displayName = displayName;\r\n        }\r\n    }\r\n\r\n    getFacebookLoginStatus = async () => {\r\n        window.FB.getLoginStatus(response => {\r\n            if (response.status === 'connected') {\r\n                this.fbAccessToken = response.authResponse.accessToken;\r\n            }\r\n        })\r\n    }\r\n\r\n    facebookLogin = () => {\r\n        this.fbLoading = true;\r\n        const apiLogin = (accessToken: string) => {\r\n            agent.Account.fbLogin(accessToken).then(user => {\r\n                store.commonStore.setToken(user.token);\r\n                this.startRefreshTokenTimer(user);\r\n                runInAction(() => {\r\n                    this.user = user;\r\n                    this.fbLoading = false;\r\n                })\r\n                history.push('/activities');\r\n            }).catch(error => {\r\n                console.log(error);\r\n                runInAction(() => this.fbLoading = false)\r\n            })\r\n        }\r\n\r\n        if (this.fbAccessToken) {\r\n            apiLogin(this.fbAccessToken);\r\n        } else {\r\n            window.FB.login(response => {\r\n                apiLogin(response.authResponse.accessToken);\r\n            }, {scope: 'public_profile,email'})\r\n        }\r\n    }\r\n\r\n    githubLogin = async (code: string) => {\r\n        this.githubLoading = true; \r\n        try {\r\n            const result = await agent.Account.ghLogin(code);\r\n            runInAction(() => {\r\n                store.commonStore.setToken(result.token);\r\n                this.startRefreshTokenTimer(result);\r\n                this.user = result;\r\n                this.githubLoading = false;\r\n            })\r\n            history.push('/activities');\r\n        } catch (error) {\r\n            console.log(error);\r\n            \r\n            runInAction(() => {\r\n                this.githubLoading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    refreshToken = async () => {\r\n        this.stopRefreshTokenTimer();\r\n        try {\r\n            const user = await agent.Account.refreshToken();\r\n            runInAction(() => this.user = user);\r\n            store.commonStore.setToken(user.token);\r\n            this.startRefreshTokenTimer(user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    private startRefreshTokenTimer(user: User) {\r\n        const jwtToken = JSON.parse(atob(user.token.split('.')[1]));\r\n        const expires = new Date(jwtToken.exp * 1000);\r\n        const timeout = expires.getTime() - Date.now() - (60 * 1000);\r\n        this.refreshTokenTimeout = setTimeout(this.refreshToken, timeout);\r\n    }\r\n\r\n    private stopRefreshTokenTimer() {\r\n        clearTimeout(this.refreshTokenTimeout);\r\n    }\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore : new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore(),\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if (token) {\r\n                    window.localStorage.setItem('jwt', token)\r\n                } else {\r\n                    window.localStorage.removeItem('jwt')\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal : Modal = {\r\n        open: false, \r\n        body: null\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this.modal);\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true; \r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false; \r\n        this.modal.body = null;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_CHAT_URL +  '?activityId=' + activityId, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            this.hubConnection.start().catch(error => console.log('Error establishing the connection: ' + error));\r\n\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => {\r\n                        comment.createdAt = new Date(comment.createdAt +'Z');\r\n                    })\r\n                    this.comments = comments;\r\n                });\r\n            })\r\n\r\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment);\r\n                });\r\n            })\r\n        }\r\n    }\r\n\r\n    stopHubConnectio = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stoping the connection: ' + error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnectio();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport { Button, Container, Menu, Image, Dropdown } from \"semantic-ui-react\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\n\r\nexport default observer(function NavBar() {\r\n    const { userStore: { user, logout, isLoggedIn } } = useStore();\r\n\r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} to='/' exact header>\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{ marginRight: 10 }} />\r\n                    Event-Partner\r\n                </Menu.Item>\r\n                {isLoggedIn && \r\n                <>\r\n                    <Menu.Item as={NavLink} to='/activities' name='Activities' />\r\n                    <Menu.Item>\r\n                        <Button as={NavLink} to='/createActivity' positive content='Create Activity' />\r\n                    </Menu.Item>\r\n                    <Menu.Item position='right'>\r\n                        <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\r\n                        <Dropdown pointing='top left' text={user?.displayName} >\r\n                            <Dropdown.Menu>\r\n                                <Dropdown.Item as={Link}\r\n                                    to={`/profiles/${user?.username}`}\r\n                                    icon='user'\r\n                                    text='My Profile' />\r\n\r\n                                <Dropdown.Item\r\n                                    onClick={logout}\r\n                                    text='Logout'\r\n                                    icon='power'\r\n                                />\r\n                            </Dropdown.Menu>\r\n                        </Dropdown>\r\n                    </Menu.Item>\r\n                </>}\r\n\r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport { Header, Menu } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\n\r\nexport default observer(function ActivityFilters() {\r\n    const { activityStore: { predicate, setPredicate } } = useStore();\r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{ width: '100%', marginTop: 25 }} >\r\n                <Header icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item\r\n                    content='All Activities'\r\n                    active={predicate.has('all')}\r\n                    onClick={() => setPredicate('all', 'true')}\r\n                />\r\n                <Menu.Item\r\n                    content=\"I'm going\"\r\n                    active={predicate.has('isGoing')}\r\n                    onClick={() => setPredicate('isGoing', 'true')}\r\n                />\r\n                <Menu.Item\r\n                    content=\"I'm hosting\"\r\n                    active={predicate.has('isHost')}\r\n                    onClick={() => setPredicate('isHost', 'true')}\r\n                />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar\r\n                onChange={(date) => setPredicate('startDate', date as Date)}\r\n                value={predicate.get('startDate') || new Date()}\r\n            />\r\n        </>\r\n\r\n    )\r\n\r\n})","import React, { SyntheticEvent } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { Button, Reveal } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({ profile }: Props) {\r\n    const { profileStore, userStore } = useStore();\r\n    const { updateFollowing, loading } = profileStore;\r\n\r\n    if (userStore.user?.username === profile.username) return null;\r\n\r\n    function handleFollow(e: SyntheticEvent, username: string) {\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\r\n    }\r\n\r\n    return (\r\n        <Reveal animated='move' >\r\n            <Reveal.Content visible style={{ width: '100%' }}>\r\n                <Button\r\n                    fluid\r\n                    color='teal'\r\n                    content={profile.following ? 'Following' : 'Not following'}\r\n\r\n                />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{ width: '100%' }}>\r\n                <Button fluid\r\n                    color={profile.following ? 'red' : 'green'}\r\n                    content={profile.following ? 'Unfollow' : 'Follow'}\r\n                    loading={loading}\r\n                    onClick={(e) => handleFollow(e, profile.username)}\r\n                />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Icon, Image } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileCard({ profile }: Props) {\r\n    const truncate= (str: string) =>  {\r\n        return str.length > 10 ? str.substring(0, 70) + \"...\" : str;\r\n    }\r\n\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`} >\r\n            <Image src={profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>\r\n                    <span style={{ overflow: 'hidden', textOverflow: 'ellipsis' }}>\r\n                        {profile.bio? truncate(profile.bio!) : 'No profile bio yet' }\r\n                    </span>\r\n                </Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user' />\r\n                {profile.followersCount} followers\r\n            </Card.Content>\r\n            <FollowButton profile={profile} />\r\n        </Card>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { List, Image, Popup } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../../app/models/profile\";\r\nimport ProfileCard from \"../../Profiles/ProfileCard\";\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendee({ attendees }: Props) {\r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 3\r\n    }\r\n\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup hoverable key={attendee.username} trigger={\r\n                    <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`} >\r\n                        <Image \r\n                        size='mini' \r\n                        circular src={attendee.image || '/assets/user.png'}\r\n                        bordered\r\n                        style={attendee.following ? styles : null }\r\n                        />\r\n                    </List.Item>\r\n                } >\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={attendee} />\r\n                    </Popup.Content>\r\n                </Popup>\r\n            ))}\r\n        </List>\r\n    )\r\n})","import { format } from \"date-fns\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Icon, Item, Label, Segment } from \"semantic-ui-react\";\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport ActivityListItemAttendee from \"./ActivityListItemAttendee\";\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default function ActivityListItem({ activity }: Props) {\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled &&\r\n                    <Label attached='top'\r\n                        style={{ textAlign: 'center' }}\r\n                        color='red'\r\n                        content='Cancelled' />\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image style={{ marginBottom: 3 }} size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`} >{activity.title}</Item.Header>\r\n                            <Item.Description>Hosted By <Link to={`/profiles/${activity.hostUsername}`}>\r\n                                {activity.host?.displayName}</Link>\r\n                            </Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='orange'>\r\n                                        Your are hosting this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            {activity.isGoing && !activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='green'>\r\n                                        Your are going to this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' /> {format(activity.date!, 'd MMMM yyyy -- h:mm aa')}\r\n                    <Icon name='marker' style={{ marginLeft: 10 }} /> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span> {activity.description} </span>\r\n                <Button as={Link} to={`/activities/${activity.id}`} content='View' color='teal' floated='right' />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { Fragment } from \"react\";\r\nimport { Header } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityListItem from \"./ActivityListItem\";\r\n\r\n\r\n\r\nexport default observer(function ActivityList() {\r\n    const { activityStore } = useStore();\r\n    const { groupedActivities } = activityStore;\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            {groupedActivities.map(([group, activities]) => (\r\n                <Fragment key={group} >\r\n                    <Header sub color='teal' >\r\n                        {group}\r\n                    </Header>\r\n                    {activities.map(activity => (\r\n                        <ActivityListItem key={activity.id} activity={activity} />\r\n                    ))}\r\n                </Fragment>\r\n            ))}\r\n        </>\r\n    )\r\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport { Grid, Loader } from \"semantic-ui-react\";\r\nimport { PagingParams } from \"../../../app/models/pagination\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityFilters from \"./ActivityFilters\";\r\nimport ActivityList from \"./ActivityList\";\r\nimport ActivityListItemPlaceholder from \"./ActivityListItemPlaceholder\";\r\n\r\n\r\n\r\nexport default observer(function ActivityDashboard() {\r\n    const { activityStore } = useStore();\r\n    const { loadActivities, activityRegistry, setPagingParams, pagination } = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\r\n        loadActivities().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (activityRegistry.size < 2) loadActivities();\r\n    }, [activityRegistry, loadActivities]);\r\n\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n                ) : (\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={!loadingNext && !!pagination\r\n                            && pagination.currentPage < pagination.totalPages}\r\n                        initialLoad={false}\r\n                    >\r\n                        <ActivityList />\r\n                    </InfiniteScroll>\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n\r\n    )\r\n})","import {  useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    label?: string;\r\n    type?: string;\r\n}\r\n\r\nexport default function MyTextInput(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error} >\r\n            <label> {props.label} </label>\r\n            <input {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red' > {meta.error} </Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Button, Header, Label } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\n\r\nexport default observer(function LoginForm() {\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.login(values)\r\n                .catch(error => setErrors({error: error.response.data}))\r\n                }\r\n        >\r\n            {({handleSubmit, isSubmitting, errors}) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off' >\r\n                    <Header as='h2' content='Login to Event-Partnet' color='teal' textAlign='center' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage \r\n                        name='error' render={() => \r\n                        <Label style={{marginBottom: 10}} basic color='red' content={errors.error}  />}\r\n                    />\r\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React from \"react\";\r\nimport { Message } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({errors}: Props) {\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((err: any, i: any) => (\r\n                        <Message.Item key={i} >{err}</Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Button, Header } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from '../errors/ValidationsErrors';\r\n\r\n\r\nexport default observer(function RegisterForm() {\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{ displayName:'', username: '' ,  email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.register(values)\r\n                .catch(error => setErrors({error}))\r\n                }\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required(),\r\n                username: Yup.string().required(),\r\n                email: Yup.string().required().email(),\r\n                password: Yup.string().required(),\r\n            })}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\r\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off' >\r\n                    <Header as='h2' content='Sign Up to Event-Partnet' color='teal' textAlign='center' />\r\n                    <MyTextInput name='displayName' placeholder='Name' />\r\n                    <MyTextInput name='username' placeholder='Username' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage \r\n                        name='error' render={() => \r\n                        <ValidationErrors errors={errors.error} />}\r\n                    />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting} \r\n                    loading={isSubmitting} positive content='Register' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Container, Header, Segment, Image, Button, Divider } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport LoginForm from \"../users/LoginForm\";\r\nimport RegisterForm from \"../users/RegisterForm\";\r\n\r\nexport default observer(function HomePage() {\r\n    const { userStore, modalStore } = useStore();\r\n    const url = window.location.href;\r\n    const hasCode = url.includes(\"?code=\");\r\n    if (hasCode) {\r\n        const newUrl = url.split(\"?code=\");\r\n        const code = newUrl[1]\r\n        userStore.githubLogin(code);\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead' >\r\n            <Container text >\r\n                <Header as='h1' inverted >\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{ marginBottom: 12 }} />\r\n                    Event-Partner\r\n                </Header>\r\n                {userStore.isLoggedIn ? (\r\n                    <>\r\n                        <Header as='h2' inverted content='Welcome to Event-Partner' />\r\n                        <Button as={Link} to='/activities' size='huge' inverted >Go to Activities!</Button>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <Button\r\n                            onClick={() => modalStore.openModal(<LoginForm />)}\r\n                            size='huge' inverted >Login\r\n                        </Button>\r\n                        <Button\r\n                            onClick={() => modalStore.openModal(<RegisterForm />)}\r\n                            size='huge' inverted >Register\r\n                        </Button>\r\n                        <Divider horizontal inverted >Or</Divider>\r\n                        {/* <Button\r\n                            size='huge'\r\n                            loading={userStore.fbLoading}\r\n                            inverted\r\n                            color='facebook'\r\n                            content='Login with Facebook'\r\n                            onClick={userStore.facebookLogin}\r\n                        /> */}\r\n                        <Button\r\n                            size='huge'\r\n                            loading={userStore.githubLoading}\r\n                            inverted\r\n                            icon='github'\r\n                            color='facebook'\r\n                            content='Login with Github'\r\n                            as='a'\r\n                            href='https://github.com/login/oauth/authorize?client_id=7aa057fd6473aad82e63'\r\n                        />\r\n                    </>\r\n\r\n                )}\r\n            </Container>\r\n        </Segment>\r\n    )\r\n});","import React from \"react\";\r\nimport { Dimmer, Loader } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nexport default function LoadingComponent({inverted = true, content = 'Loading...'} : Props){\r\n    return (\r\n        <Dimmer active={true} inverted={inverted} >\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextArea(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error} >\r\n            <label> {props.label} </label>\r\n            <textarea {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red' > {meta.error} </Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}\r\n","export const categoryOptions = [\r\n    {text: 'Drinks', value: 'drinks'}, \r\n    {text: 'Culture', value: 'culture'}, \r\n    {text: 'Film', value: 'film'}, \r\n    {text: 'Food', value: 'food'}, \r\n    {text: 'Music', value: 'music'}, \r\n    {text: 'Travel', value: 'travel'}, \r\n\r\n]","import {  useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label, Select } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n}\r\n\r\n\r\nexport default function MySelectInput(props: Props) {\r\n    const [field, meta, helpers] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error} >\r\n        <label> {props.label} </label>\r\n        <Select \r\n            clearable\r\n            options={props.options}\r\n            value={field.value || null}\r\n            onChange={(e, d) => helpers.setValue(d.value)}\r\n            onBlur={() => helpers.setTouched(true)}\r\n            placeholder={props.placeholder}\r\n        />\r\n        {meta.touched && meta.error ? (\r\n            <Label basic color='red' > {meta.error} </Label>\r\n        ) : null}\r\n    </Form.Field>\r\n    )\r\n} ","import {  useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\r\n\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [field, meta, helpers] = useField(props.name!);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error} >\r\n            <DatePicker \r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red' > {meta.error} </Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport {  useEffect, useState } from \"react\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport { Segment, Button, Header } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport { v4 as uuid } from 'uuid';\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from \"../../../app/common/form/MyTextInput\";\r\nimport MyTextArea from \"../../../app/common/form/MyTextArea\";\r\nimport { categoryOptions } from \"../../../app/common/options/categoryOptions\";\r\nimport MySelectInput from \"../../../app/common/form/MySelectInput\";\r\nimport MyDateInput from \"../../../app/common/form/MyDateInput\";\r\nimport { ActivityFormValues } from \"../../../app/models/activity\";\r\n\r\n\r\n\r\nexport default observer(function ActivityForm() {\r\n    const history = useHistory();\r\n    const { activityStore } = useStore();\r\n    const { createActivity, updateActivity,\r\n         loadActivity, loadingInitial } = activityStore;\r\n\r\n    const { id } = useParams<{ id: string }>();\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)));\r\n\r\n    }, [id, loadActivity])\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The activity title is required'),\r\n        description: Yup.string().required('The description  is required'),\r\n        category: Yup.string().required('The category is required'),\r\n        date: Yup.string().required('The date is required').nullable(),\r\n        city: Yup.string().required('The city is required'),\r\n        venue: Yup.string().required('The venue is required'),\r\n    })\r\n\r\n\r\n    function handleFormSubmit(activity: ActivityFormValues){\r\n        if (!activity.id) {\r\n            let newActivity = {\r\n                ...activity, \r\n                id: uuid()\r\n            };\r\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`));\r\n        }\r\n        else {\r\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`));\r\n        }\r\n    }\r\n\r\n\r\n    if (id)\r\n        if (loadingInitial) return <LoadingComponent content='Loading activity...' />\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Activity Details' sub color='teal' />\r\n            <Formik enableReinitialize\r\n                initialValues={activity}\r\n                validationSchema={validationSchema}\r\n                onSubmit={values => handleFormSubmit(values)} >\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'  >\r\n                        <MyTextInput name='title' placeholder='Title' />\r\n                        <MyTextArea placeholder='Description' name='description' rows={3} />\r\n                        <MySelectInput placeholder='Category' name='category' options={categoryOptions} />\r\n                        <MyDateInput placeholderText='Date'\r\n                          name='date' \r\n                          showTimeSelect\r\n                          timeCaption='time'\r\n                          dateFormat='d  MMMM yyyy -- hh:mm'\r\n\r\n                          />\r\n                        <Header content='Location Details' sub color='teal' />\r\n                        <MyTextInput placeholder='City' name='city' />\r\n                        <MyTextInput placeholder='Venue' name='venue' />\r\n\r\n                        <Button \r\n                            loading={isSubmitting} \r\n                            floated='right' \r\n                            positive \r\n                            type='submit' \r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            content='Submit' />\r\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\r\n\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n\r\n        </Segment>\r\n    )\r\n})","import { Formik, Form, Field, FieldProps } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store'\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from 'date-fns/esm'\r\n\r\ninterface Props {\r\n    activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\r\n    const { commentStore } = useStore();\r\n\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, activityId])\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{ border: 'none' }}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Formik\r\n                    onSubmit={(values, { resetForm }) =>\r\n                        commentStore.addComment(values).then(() => resetForm())}\r\n                    initialValues={{ body: '' }}\r\n                    validationSchema={Yup.object({\r\n                        body: Yup.string().required()\r\n                    })}\r\n                >\r\n                    {({ isSubmitting, isValid, handleSubmit }) => (\r\n                        <Form className='ui form'>\r\n                            <Field name='body'>\r\n                                {(props: FieldProps) => (\r\n                                    <div style={{ position: 'relative' }} >\r\n                                        <Loader active={isSubmitting} />\r\n                                        <textarea\r\n                                            placeholder='Enter your comment (Enter to submit, Shift + Enter for new line'\r\n                                            rows={2}\r\n                                            {...props.field}\r\n                                            onKeyPress={e => {\r\n                                                if (e.key === 'Enter' && e.shiftKey)\r\n                                                    return;\r\n                                                if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                    e.preventDefault();\r\n                                                    isValid && handleSubmit()\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\r\n                            <Comment.Content>\r\n                                <Comment.Author\r\n                                    as={Link}\r\n                                    to={`/profiles/${comment.username}`} >\r\n                                    {comment.displayName}\r\n                                </Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{ whiteSpace: 'pre-wrap' }} > {comment.body} </Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n\r\n\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Item, Segment, Image, Label } from 'semantic-ui-react'\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\r\n    const { activityStore: { updateAttendance, loading, cancelActivityToggle } } = useStore();\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{ padding: '0' }}>\r\n                {activity.isCancelled && (\r\n                    <Label style={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }}\r\n                        ribbon color='red' content='Cancelled' />\r\n                )}\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{ color: 'white' }}\r\n                                />\r\n                                <p>{format(activity.date!, 'd MMMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by <strong>\r\n                                        <Link to={`/profiles/${activity.host?.username}`} >\r\n                                            {activity.host?.displayName}\r\n                                        </Link>\r\n                                    </strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button color='orange'\r\n                            floated='right'\r\n                            disabled={activity.isCancelled}\r\n                            as={Link}\r\n                            to={`/manage/${activity.id}`}>\r\n                            Manage Event\r\n                        </Button>\r\n                        <Button loading={loading}\r\n                            floated='left'\r\n                            color={activity.isCancelled ? 'green' : 'red'}\r\n                            onClick={cancelActivityToggle}>\r\n                            {activity.isCancelled ? 'Reactivate' : 'Cancel Event'}\r\n                        </Button>\r\n                    </>\r\n\r\n                ) : activity.isGoing ? (\r\n                    <Button loading={loading} onClick={updateAttendance}>\r\n                        Cancel attendance\r\n                    </Button>\r\n                ) : (\r\n                    <Button disabled={activity.isCancelled}\r\n                        color='teal' loading={loading}\r\n                        onClick={updateAttendance} >\r\n                        Join Activity\r\n                    </Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Segment, Grid, Icon } from 'semantic-ui-react'\r\nimport { Activity } from \"../../../app/models/activity\";\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({ activity }: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <span>\r\n                            {format(activity.date!, 'd MMMM yyyy -- h:mm aa')}\r\n                        </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity';\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\n\r\nexport default observer(function ActivityDetailedSidebar({ activity: {attendees, host} }: Props) {\r\n    if (!attendees) return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person ' : 'People '} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n                        <Item key={attendee.username} style={{ position: 'relative' }}>\r\n                            {attendee.username === host?.username && \r\n                            <Label\r\n                                style={{ position: 'absolute' }}\r\n                                color='orange'\r\n                                ribbon='right'\r\n                            >\r\n                                Host\r\n                            </Label>}\r\n                            <Image size='tiny' src={attendee.image ||  '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                {attendee.following && \r\n                                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport {  useParams } from \"react-router-dom\";\r\nimport {  Grid} from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityDetailedChat from \"./ActivityDetailedChat\";\r\nimport ActivityDetailedHeader from \"./ActivityDetailedHeader\";\r\nimport ActivityDetailedInfo from \"./ActivityDetailedInfo\";\r\nimport ActivityDetailedSidebar from \"./ActivityDetailedSidebar\";\r\n\r\n\r\n\r\nexport default observer( function ActivityDetails() {\r\n    const {activityStore} = useStore();\r\n    const {selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity} = activityStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id);\r\n        return () => clearSelectedActivity();\r\n    }, [id, loadActivity, clearSelectedActivity]);\r\n\r\n    if (loadingInitial || !activity) return <LoadingComponent /> ;\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailedHeader activity={activity} />\r\n                <ActivityDetailedInfo activity={activity} />\r\n                <ActivityDetailedChat activityId={activity.id} />\r\n            </Grid.Column>\r\n            <Grid.Column width={6} >\r\n                <ActivityDetailedSidebar activity={activity} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})\r\n","import React, { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationsErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n    const [errors, setErrors] = useState(null);\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors && \r\n                <ValidationErrors errors={errors} />\r\n            }\r\n        </>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\";\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Opps we've looked everywhere and could not find this!\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary >Back to activities</Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Container, Header, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nexport default observer(function ServerError() {\r\n    const {commonStore} = useStore();\r\n    return(\r\n        <Container>\r\n            <Header as='h1' content='Server Error' />\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\r\n            {commonStore.error?.details && \r\n                <Segment>\r\n                    <Header as='h4' content='Stack trace' color='teal' />\r\n                    <code style={{marginTop: '10px'}} >{ commonStore.error.details }</code>\r\n                </Segment>\r\n            }\r\n        </Container>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Modal } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../stores/store\";\r\n\r\n\r\nexport default observer(function ModalContainer() {\r\n    const {modalStore} = useStore();\r\n\r\n    return (\r\n        <Modal \r\n        open={modalStore.modal.open} \r\n        onClose={modalStore.closeModal}\r\n        size='mini'\r\n        >\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import React, {useCallback} from 'react'\r\nimport {useDropzone} from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({setFiles}: Props) {\r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadius: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center' ,\r\n        height: 200\r\n    }\r\n\r\n    const dzActive = {\r\n        borderColor: 'green'\r\n    }\r\n\r\n  const onDrop = useCallback(acceptedFiles => {\r\n    setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n        preview: URL.createObjectURL(file)\r\n    })))\r\n  }, [setFiles])\r\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n\r\n  return (\r\n    <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles } >\r\n      <input {...getInputProps()} />\r\n      <Icon name='upload' size='huge' />\r\n      <Header content='Drop image here' />\r\n    </div>\r\n  )\r\n}","import React from \"react\";\r\nimport {Cropper} from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css'\r\n\r\ninterface Props {\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props) {\r\n    return (\r\n        <Cropper \r\n          src={imagePreview}  \r\n          style={{height: 200, width: '100%'}}\r\n          initialAspectRatio={1}\r\n          aspectRatio={1}\r\n          preview='.img-preview'\r\n          guides={false}\r\n          viewMode={1}\r\n          autoCropArea={1}\r\n          background={false}\r\n          onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    )\r\n} ","import React, { useEffect, useState } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport Grid from \"semantic-ui-react/dist/commonjs/collections/Grid\";\r\nimport { Button, Header } from \"semantic-ui-react\";\r\nimport PhotoWidgetDropzone from \"./PhotoWidgetDropzone\";\r\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\r\n\r\ninterface Props {\r\n    uploadPhoto: (file: Blob) => void;\r\n    loading: boolean;\r\n}\r\n\r\nexport default observer(function PhotoUploadWidget({uploadPhoto, loading}: Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blop => uploadPhoto(blop!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            //clean up and dispose of preview file\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\r\n        }\r\n    }, [files])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 2 - Resize image' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\r\n                {files && files.length > 0 && \r\n                <>\r\n                    <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\r\n                    <Button.Group widths={2}>\r\n                        <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                        <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                    </Button.Group>\r\n                </>}\r\n\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React, { SyntheticEvent, useState } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Card, Header, Tab, Image, Grid, Button } from \"semantic-ui-react\";\r\nimport { Photo, Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport PhotoUploadWidget from \"../../app/common/imageUpload/PhotoUploadWidget\";\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nexport default observer(function ProfilePhotos({ profile }: Props) {\r\n    const { profileStore: { isCurrentUser, uploadPhoto, \r\n        uploading, loadingPhoto, setMainPhoto, deletePhoto } } = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, settarget] = useState('')\r\n\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>){\r\n        settarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        settarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {isCurrentUser &&\r\n                        <Button floated='right' basic\r\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    }\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\r\n                    )\r\n                        : (\r\n                            <Card.Group itemsPerRow={5}>\r\n                                {profile.photos?.map(photo => (\r\n                                    <Card key={photo.id} >\r\n                                        <Image src={photo.url} />\r\n                                        {isCurrentUser && (\r\n                                            <Button.Group fluid widths={2}>\r\n                                                <Button \r\n                                                    basic\r\n                                                    color='green'\r\n                                                    content='Main'\r\n                                                    name={ 'main' + photo.id}\r\n                                                    disabled={photo.isMain}\r\n                                                    loading={target ===  'main' + photo.id && loadingPhoto}\r\n                                                    onClick={e => handleSetMainPhoto(photo, e)}\r\n                                                />\r\n                                                <Button \r\n                                                    basic\r\n                                                    color='red'\r\n                                                    icon='trash'\r\n                                                    name={photo.id}\r\n                                                    disabled={photo.isMain}\r\n                                                    loading={target === photo.id && loadingPhoto}\r\n                                                    onClick={e => handleDeletePhoto(photo, e)}\r\n                                                />\r\n                                            </Button.Group>\r\n                                        )}\r\n                                    </Card>\r\n                                ))}\r\n\r\n                            </Card.Group>\r\n                        )\r\n                    }\r\n                </Grid.Column>\r\n            </Grid>\r\n\r\n\r\n        </Tab.Pane>\r\n    )\r\n})","import React, { useEffect, useState } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button, Form, Grid } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport { Profile, ProfileFormValues } from \"../../app/models/profile\";\r\nimport { Formik } from \"formik\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport MyTextArea from \"../../app/common/form/MyTextArea\";\r\nimport * as Yup from 'yup';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n    editMode: boolean;\r\n}\r\n\r\nexport default observer(function EditProfileForm({profile, editMode}: Props) {\r\n    const { profileStore: {  updateProfile } } = useStore();\r\n    const [profileValues, setProfileValues] = useState<ProfileFormValues>(new ProfileFormValues(profile));\r\n\r\n\r\n    const validationSchema = Yup.object({\r\n        displayName: Yup.string().required('The display name is required'),\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (profile){\r\n            setProfileValues(new ProfileFormValues(profile) )\r\n        }\r\n    }, [profile])\r\n\r\n    function handleFormSubmit(values: ProfileFormValues){\r\n        updateProfile(values);\r\n        editMode = false;\r\n    }\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                <Formik enableReinitialize\r\n                    initialValues={profileValues}\r\n                    validationSchema={validationSchema}\r\n                    onSubmit={values => handleFormSubmit(values)} \r\n                >\r\n                    {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MyTextInput name='displayName' placeholder='Display Name' />\r\n                        <MyTextArea placeholder='Bio' name='bio' rows={3} />\r\n                        <Button \r\n                            loading={isSubmitting} \r\n                            floated='right' \r\n                            positive \r\n                            type='submit' \r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            content='Submit' />\r\n                    </Form>\r\n                    )}\r\n                </Formik>\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})\r\n","import React, { useState } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button, Header, Tab } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport EditProfileForm from \"./EditProfileForm\";\r\n\r\ninterface Props {\r\n        profile: Profile\r\n}\r\n\r\nexport default observer(function ProfileAbout({ profile }: Props) {\r\n        const { profileStore: { isCurrentUser } } = useStore();\r\n        const [editMode, setEditMode] = useState(false);\r\n\r\n        return (\r\n                <Tab.Pane>\r\n                        {isCurrentUser &&\r\n                                <Button\r\n                                        basic\r\n                                        content={editMode ? 'Cancel' : 'Edit Profile'}\r\n                                        floated='right'\r\n                                        onClick={() => setEditMode(!editMode)}\r\n                                />}\r\n                        {!editMode &&\r\n                                <>\r\n                                        <Header as='h3' content={'About ' + profile.displayName} />\r\n                                        <p style={{ whiteSpace: 'pre-wrap' }} \r\n                                        >{profile.bio}</p>\r\n                                </>\r\n                        }\r\n                        {editMode && \r\n                                <EditProfileForm profile={profile} editMode={editMode} />\r\n\r\n                        }\r\n                </Tab.Pane>\r\n        )\r\n})","import React from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport { Card, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport ProfileCard from \"./ProfileCard\";\r\n\r\n\r\n\r\nexport default observer(function ProfileFollowings() {\r\n    const { profileStore } = useStore();\r\n    const { profile, followings, loadingFollowings, activeTab } = profileStore;\r\n\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingFollowings} >\r\n            <Grid>\r\n                <Grid.Column width={16} >\r\n                    <Header\r\n                        floated='left'\r\n                        icon='user'\r\n                        content={activeTab === 3 ?  `People following ${profile?.displayName}` : `People ${profile?.displayName} is following`}\r\n                    />\r\n                </Grid.Column>\r\n                <Grid.Column width={16} >\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map(profile => (\r\n                            <ProfileCard key={profile.username} profile={profile} /> \r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React, { SyntheticEvent, useEffect } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport { Card, Grid, Header, Tab, TabProps, Image } from \"semantic-ui-react\";\r\nimport { UserActivity } from \"../../app/models/profile\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { format } from 'date-fns';\r\n\r\nexport default observer(function ProfileActivities() {\r\n    const { profileStore: { loadUserActivites, userActivities, loadingActivities, profile } } = useStore();\r\n\r\n    const panes = [\r\n        { menuItem: 'Future Events', pane: { key: 'future' } },\r\n        { menuItem: 'Past Events', pane: { key: 'past' } },\r\n        { menuItem: 'Hosting', pane: { key: 'hosting' } }\r\n    ];\r\n\r\n    useEffect(() => {\r\n        loadUserActivites(profile!.username);\r\n    }, [loadUserActivites, profile]);\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivites(profile!.username, panes[data.activeIndex as\r\n            number].pane.key);\r\n    };\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar' content={'Activities'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        panes={panes}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities.map((activity: UserActivity) => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`/activities/${activity.activityId}`}\r\n                                key={activity.activityId}\r\n                            >\r\n                                <Image\r\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\r\n\r\n                                    style={{\r\n                                        minHeight: 100, objectFit:\r\n                                            'cover'\r\n                                    }}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header\r\n                                        textAlign='center'>{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(activity.date),\r\n                                            'do LLL')}</div>\r\n                                        <div>{format(new Date(activity.date),\r\n                                            'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Tab } from \"semantic-ui-react\";\r\nimport ProfilePhotos from \"./ProfilePhotos\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport ProfileAbout from \"./ProfileAbout\";\r\nimport ProfileFollowings from \"./ProfileFollowings\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileActivites from \"./ProfileActivites\";\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nexport default observer (function ProfileContent({profile}: Props) {\r\n    const {profileStore} = useStore();\r\n\r\n    const panes = [\r\n        {menuItem: 'About', render: () => <ProfileAbout profile={profile} /> },\r\n        {menuItem: 'Photos', render: () => < ProfilePhotos profile={profile} />},\r\n        {menuItem: 'Events', render: () => <ProfileActivites />},\r\n        {menuItem: 'Followers', render: () => <ProfileFollowings /> },\r\n        {menuItem: 'Following', render: () => <ProfileFollowings />},\r\n    ]\r\n    return (\r\n        <Tab \r\n            menu={{fluid: true, vertical: true}}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport {  Divider, Grid, Header, Item, Segment, Statistic } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nexport default observer(function ProfileHeader({profile}: Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={ profile.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4} >\r\n                    <Statistic.Group widths={2} >\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileContent from \"./ProfileContent\";\r\nimport ProfileHeader from \"./ProfileHeader\";\r\n\r\n\r\nexport default observer(function ProfilePage() {\r\n    const { username } = useParams<{ username: string }>();\r\n    const { profileStore } = useStore();\r\n    const { loadingProfile, loadProfile, profile, setActiveTab } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n        return () => {\r\n            setActiveTab(0);\r\n        }\r\n    }, [loadProfile, username, setActiveTab])\r\n\r\n    if (loadingProfile) return <LoadingComponent content='Loading profile...' />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile &&\r\n                    <>\r\n                        <ProfileHeader profile={profile} />\r\n                        <ProfileContent profile={profile} />\r\n                    </>\r\n                }\r\n            </Grid.Column>\r\n        </Grid>\r\n\r\n    )\r\n})","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\r\n    const {userStore: {isLoggedIn}} = useStore();\r\n    return (\r\n        <Route \r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' /> }\r\n        />\r\n    )\r\n\r\n}","import { useLocation } from \"react-router-dom\";\r\n\r\nexport default function useQuery() {\r\n    return new URLSearchParams(useLocation().search);\r\n}","import React from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport useQuery from \"../../app/common/util/hooks\";\r\nimport agent from \"../../app/api/agent\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\";\r\n\r\nexport default observer(function RegisterSuccess() {\r\n    const email = useQuery().get('email') as string;\r\n\r\n    function handleConfirmEmailResend() {\r\n        agent.Account.resendEmailConfirm(email).then(() => {\r\n            toast.success('Verification email resent. Please check your inbox');\r\n        }).catch(error => console.log(error))\r\n    }\r\n\r\n    return (\r\n        <Segment placeholder textAlign='center' >\r\n            <Header icon color='green'>\r\n                <Icon name='check' />\r\n                Successfully Registered!\r\n            </Header>\r\n            <p>Please check your email (including junk email) for the verification email</p>\r\n            {email &&\r\n                <>\r\n                    <p>Didn't receive the email? Click the below button to resend</p>\r\n                    <Button primary \r\n                    onClick={handleConfirmEmailResend} \r\n                    content='Resend email' size='huge' />\r\n                </>\r\n            }\r\n        </Segment>\r\n    )\r\n})","import React, { useEffect, useState } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\";\r\nimport agent from \"../../app/api/agent\";\r\nimport useQuery from \"../../app/common/util/hooks\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport LoginForm from \"./LoginForm\";\r\n\r\n\r\nexport default function ConfirmEmail() {\r\n    const {modalStore} = useStore();\r\n    const email = useQuery().get('email') as string;\r\n    const token = useQuery().get('token') as string;\r\n\r\n    const Status = {\r\n        Verifying: 'Verifying',\r\n        Failed: 'Failed',\r\n        Success: 'Success'\r\n    }\r\n\r\n    const [status, setStaus] = useState(Status.Verifying);\r\n    function handleConfirmEmailResend() {\r\n        agent.Account.resendEmailConfirm(email).then(() => {\r\n            toast.success('Verification email resent. Please check your inbox');\r\n        }).catch(error => console.log(error))\r\n    }\r\n\r\n    useEffect(() => {\r\n        agent.Account.verifyEmail(token, email).then(() => {\r\n            setStaus(Status.Success)\r\n        }).catch(() => {\r\n            setStaus(Status.Failed);\r\n        })\r\n    }, [Status.Failed, Status.Success, token, email])\r\n\r\n    function getBody() {\r\n        switch (status) {\r\n            case Status.Verifying:\r\n                return <p>Verifying...</p>;\r\n            case Status.Failed:\r\n                return (\r\n                    <div>\r\n                        <p>Verification failed. You can try resending the verify link to your email</p>\r\n                        <Button primary onClick={handleConfirmEmailResend} size='huge' content='Resend Email' />\r\n                    </div>\r\n                );\r\n            case Status.Success: \r\n                    return (\r\n                        <div>\r\n                            <p>Email has been verified. You can now login</p>\r\n                            <Button positive onClick={() => modalStore.openModal(<LoginForm />)} size='huge' content='Login' /> \r\n                        </div>\r\n                    );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Segment placeholder textAlign='center' >\r\n            <Header icon>\r\n                <Icon name='envelope' />\r\n                Email verification\r\n            </Header>\r\n            <Segment.Inline>\r\n                {getBody()}\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n} ","import React, { useEffect } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router-dom';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport TestErrors from '../../features/errors/TestError';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/Profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\nimport RegisterSuccess from '../../features/users/RegisterSuccess';\nimport ConfirmEmail from '../../features/users/ConfirmEmail';\n\nfunction App() {\n  const location = useLocation();\n  const { commonStore, userStore } = useStore();\n\n  useEffect(() => {\n    if (commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\n    } else {\n      commonStore.setAppLoaded();\n    }\n  }, [commonStore, userStore])\n\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\n\n  return (\n    <>\n      <ToastContainer position='bottom-right' hideProgressBar />\n      <ModalContainer />\n      <Route exact path='/' component={HomePage} />\n      <Route\n        path={'/(.+)'}\n        render={() => (\n          <>\n            <NavBar />\n            <Container style={{ marginTop: '7em' }} >\n              <Switch>\n                <PrivateRoute path='/activities' exact component={ActivityDashboard} />\n                <PrivateRoute path='/activities/:id' component={ActivityDetails} />\n                <PrivateRoute path={['/createActivity', '/manage/:id']} key={location.key} component={ActivityForm} />\n                <PrivateRoute path='/profiles/:username' component={ProfilePage} />\n                <PrivateRoute path='/errors' component={TestErrors} />\n                <Route path='/server-error' component={ServerError} />\n                <Route path='/account/registerSuccess' component={RegisterSuccess} />\n                <Route path='/account/verifyEmail' component={ConfirmEmail} />\n                <Route component={NotFound} />\n              </Switch>\n            </Container>\n          </>\n        )}\n      />\n\n    </>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\n\r\nexport default function ScrollToTop() {\r\n    const {pathname} = useLocation();\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n    }, [pathname])\r\n    return null;\r\n} ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport {createBrowserHistory} from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value={store} >\n    <Router history={history}>\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>\n    ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}