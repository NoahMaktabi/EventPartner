{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/Profiles/FollowButton.tsx","features/Profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationsErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/options/categoryOptions.ts","app/common/form/MySelectInput.tsx","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/Profiles/ProfilePhotos.tsx","features/Profiles/EditProfileForm.tsx","features/Profiles/ProfileAbout.tsx","features/Profiles/ProfileFollowings.tsx","features/Profiles/ProfileActivites.tsx","features/Profiles/ProfileContent.tsx","features/Profiles/ProfileHeader.tsx","features/Profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","fbLogin","accessToken","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","editProfile","profile","updateFollowing","listFollowings","predicate","getUserActivity","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ProfileFormValues","bio","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","runInAction","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","deleteActivity","createActivity","attendee","newActivity","updateActivity","updatedActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","URLSearchParams","toString","toISOString","ProfileStore","loadingProfile","uploading","loadingPhoto","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","updateProfile","setDisplayName","activityStore","followingCount","loadFollowings","loadUserActivites","UserStore","fbAccessToken","fbLoading","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","getFacebookLoginStatus","FB","getLoginStatus","authResponse","facebookLogin","apiLogin","catch","scope","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","on","comment","createdAt","unshift","stopHubConnectio","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","name","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","e","preventDefault","handleFollow","str","Card","Description","overflow","textOverflow","length","substring","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Segment","Group","Label","textAlign","marginBottom","basic","marginLeft","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","Divider","LoadingComponent","Dimmer","MyTextArea","categoryOptions","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","preview","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","guides","viewMode","autoCropArea","background","onInitialized","cropper","files","revokeObjectURL","getCroppedCanvas","toBlob","blop","isCurrentUser","addPhotoMode","setAddPhotoMode","target","settarget","Tab","Pane","itemsPerRow","currentTarget","handleSetMainPhoto","handleDeletePhoto","profileValues","setProfileValues","setEditMode","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","objectFit","Meta","ProfileActivites","menuPosition","Statistic","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"wZAOaA,EAGT,WAAYC,EAASC,GAAyB,yBAF9CD,UAE6C,OAD7CC,gBAC6C,EACzCC,KAAKF,KAAOA,EACZE,KAAKD,WAAaA,GAIbE,EAIT,aAA0C,IAA9BC,EAA6B,uDAAhB,EAAGC,EAAa,uDAAF,EAAE,yBAHzCD,gBAGyC,OAFzCC,cAEyC,EACrCH,KAAKE,WAAaA,EAClBF,KAAKG,SAAWA,GCPxBC,IAAMC,SAASC,QAAUC,OAEzBH,IAAMI,aAAaC,QAAQC,KAAI,SAAAC,GAC3B,IAAMC,EAAQC,EAAMC,YAAYF,MAEhC,OADIA,IAAOD,EAAOI,QAAQC,cAAf,iBAAyCJ,IAC7CD,KAIXP,IAAMI,aAAaS,SAASP,IAA5B,+BAAAQ,EAAA,MAAgC,WAAMD,GAAN,eAAAC,EAAA,iFAGtBnB,EAAakB,EAASF,QAAT,YAHS,uBAKxBE,EAASnB,KAAO,IAAID,EAAgBoB,EAASnB,KAAMqB,KAAKC,MAAMrB,IALtC,kBAMjBkB,GANiB,gCAQrBA,GARqB,2CAAhC,uDASG,SAACI,GACA,MAA+BA,EAAMJ,SAA9BnB,EAAP,EAAOA,KAAMwB,EAAb,EAAaA,OAAQX,EAArB,EAAqBA,OACrB,OAAQW,GACJ,KAAK,IAOD,GANoB,kBAATxB,GACPyB,IAAMF,MAAMvB,GAEM,QAAlBa,EAAOa,QAAoB1B,EAAK2B,OAAOC,eAAe,OACtDC,GAAQC,KAAK,cAEb9B,EAAK2B,OAAQ,CACb,IAAMI,EAAmB,GACzB,IAAK,IAAMC,KAAOhC,EAAK2B,OACf3B,EAAK2B,OAAOK,IACZD,EAAiBD,KAAK9B,EAAK2B,OAAOK,IAG1C,MAAMD,EAAiBE,OAEvBR,IAAMF,MAAMvB,GAEhB,MACJ,KAAK,IACDyB,IAAMF,MAAM,iBACZ,MACJ,KAAK,IACDM,GAAQC,KAAK,cACb,MACJ,KAAK,IACDf,EAAMC,YAAYkB,eAAelC,GACjC6B,GAAQC,KAAK,iBAGrB,OAAOK,QAAQC,OAAOb,MAG1B,IAAMc,EAAe,SAAKlB,GAAL,OAAoCA,EAASnB,MAE5DsC,EACG,SAAKC,GAAL,OAAqBjC,IAAMkC,IAAOD,GAAKE,KAAKJ,IAD/CC,EAEI,SAAIC,EAAaG,GAAjB,OAA8BpC,IAAMqC,KAAQJ,EAAKG,GAAMD,KAAKJ,IAFhEC,EAGG,SAAIC,EAAaG,GAAjB,OAA8BpC,IAAMsC,IAAOL,EAAKG,GAAMD,KAAKJ,IAH9DC,EAIG,SAAKC,GAAL,OAAqBjC,IAAMuC,OAAUN,GAAKE,KAAKJ,IA6CzCS,EAND,CACVC,WArCe,CACfC,KAAM,SAACC,GAAD,OAA6B3C,IAAMkC,IAAiC,cAAe,CAACS,WAASR,KAAKJ,IACxGa,QAAS,SAACC,GAAD,OAAgBb,EAAA,sBAAsCa,KAC/DC,OAAQ,SAACC,GAAD,OAAkCf,EAAoB,cAAee,IAC7EC,OAAQ,SAACD,GAAD,OAAkCf,EAAA,sBAAkCe,EAASF,IAAME,IAC3FR,OAAQ,SAACM,GAAD,OAAgBb,EAAA,sBAAkCa,KAC1DI,OAAQ,SAACJ,GAAD,OAAgBb,EAAA,sBAAmCa,EAAnC,WAAgD,MAgCxEK,QA7BY,CACZC,QAAS,kBAAMnB,EAAmB,aAClCoB,MAAO,SAACC,GAAD,OAA0BrB,EAAoB,iBAAkBqB,IACvEC,SAAU,SAACD,GAAD,OAA0BrB,EAAoB,oBAAqBqB,IAC7EE,QAAS,SAACC,GAAD,OAAyBxB,EAAA,uCAAoDwB,GAAe,MA0BrGC,SAvBa,CACbvB,IAAK,SAACwB,GAAD,OAAsB1B,EAAA,oBAAmC0B,KAC9DC,YAAa,SAACC,GACV,IAAIC,EAAW,IAAIC,SAEnB,OADAD,EAASE,OAAO,OAAQH,GACjB5D,IAAMqC,KAAK,SAAUwB,EAAU,CAClClD,QAAS,CAAC,eAAgB,0BAGlCqD,aAAc,SAACnB,GAAD,OAAgBb,EAAA,kBAAyBa,EAAzB,YAAuC,KACrEoB,YAAa,SAACpB,GAAD,OAAgBb,EAAA,iBAAuBa,KACpDqB,YAAa,SAACC,GAAD,OAAgCnC,EAAA,aAAiCmC,IAC9EC,gBAAiB,SAACV,GAAD,OAAsB1B,EAAA,kBAA+B0B,GAAY,KAClFW,eAAgB,SAACX,EAAkBY,GAAnB,OACZtC,EAAA,kBAAmC0B,EAAnC,sBAAyDY,KAC7DC,gBAAiB,SAACb,EAAkBY,GAAnB,OACjBtC,EAAA,oBAA0C0B,EAA1C,iCAA2EY,OC5FhEE,EACX,WAAYC,GAA4B,oBACtCC,OAAOC,OAAO/E,KAAM6E,IAIXG,EASX,WAAY7B,GAAgC,yBAR5CF,QAAcgC,EAQ6B,KAP3CC,MAAgB,GAO2B,KAN3CC,SAAmB,GAMwB,KAL3CC,YAAsB,GAKqB,KAJ3CC,KAAoB,KAIuB,KAH3CC,KAAe,GAG4B,KAF3CC,MAAgB,GAGVpC,IACFnD,KAAKiD,GAAKE,EAASF,GACnBjD,KAAKkF,MAAQ/B,EAAS+B,MACtBlF,KAAKmF,SAAWhC,EAASgC,SACzBnF,KAAKoF,YAAcjC,EAASiC,YAC5BpF,KAAKqF,KAAOlC,EAASkC,KACrBrF,KAAKuF,MAAQpC,EAASoC,MACtBvF,KAAKsF,KAAOnC,EAASmC,OC3BhBE,EACT,WAAY/B,GAAY,oBACpBzD,KAAK8D,SAAWL,EAAKK,SACrB9D,KAAKyF,YAAchC,EAAKgC,YACxBzF,KAAK0F,MAAQjC,EAAKiC,OAUbC,EAGT,WAAYpB,GAAoB,yBAFhCkB,YAAsB,GAES,KAD/BG,IAAc,GAENrB,IACAvE,KAAK4F,IAAMrB,EAAQqB,IACnB5F,KAAKyF,YAAclB,EAAQkB,cC1BlBI,E,WAUjB,aAAe,IAAD,gCATdC,iBAAmB,IAAIC,IAST,KARdC,sBAAyCf,EAQ3B,KAPdgB,UAAW,EAOG,KANdC,SAAU,EAMI,KALdC,gBAAiB,EAKH,KAJdpG,WAAgC,KAIlB,KAHdqG,aAAe,IAAInG,EAGL,KAFdyE,WAAY,IAAIqB,KAAMM,IAAI,OAAO,GAEnB,KA4BdC,gBAAkB,SAACF,GACf,EAAKA,aAAeA,GA7BV,KAgCdG,aAAe,SAAC7B,EAAmB8B,GAC/B,IAAMC,EAAiB,WACnB,EAAK/B,UAAUgC,SAAQ,SAACF,EAAO1E,GACf,cAARA,GAAqB,EAAK4C,UAAU/B,OAAOb,OAGvD,OAAQ4C,GACJ,IAAK,MACD+B,IACA,EAAK/B,UAAU2B,IAAI,OAAO,GAC1B,MACJ,IAAK,UACDI,IACA,EAAK/B,UAAU2B,IAAI,WAAW,GAC9B,MACJ,IAAK,SACDI,IACA,EAAK/B,UAAU2B,IAAI,UAAU,GAC7B,MACJ,IAAK,YACL,EAAK3B,UAAU/B,OAAO,aACtB,EAAK+B,UAAU2B,IAAI,YAAaG,KArD1B,KAwEdG,eAxEc,sBAwEG,4BAAAzF,EAAA,6DACb,EAAKiF,gBAAiB,EADT,kBAGYvD,EAAMC,WAAWC,KAAK,EAAK8D,aAHvC,QAGHC,EAHG,QAKF/G,KAAK4G,SAAQ,SAAAvD,GAChB,EAAK2D,YAAY3D,MAErB,EAAK4D,cAAcF,EAAO9G,YAC1B,EAAKiH,mBAAkB,GATd,kDAYTC,QAAQC,IAAR,MACA,EAAKF,mBAAkB,GAbd,0DAxEH,KAyFdD,cAAgB,SAAChH,GACb,EAAKA,WAAaA,GA1FR,KA6FdoH,aA7Fc,uCA6FC,WAAOlE,GAAP,eAAA/B,EAAA,2DACPiC,EAAW,EAAKiE,YAAYnE,IADrB,uBAGP,EAAK+C,iBAAmB7C,EAHjB,kBAIAA,GAJA,cAOP,EAAKgD,gBAAiB,EAPf,mBAScvD,EAAMC,WAAWG,QAAQC,GATvC,eASHE,EATG,OAUH,EAAK2D,YAAY3D,GACjBkE,aAAY,WACR,EAAKrB,iBAAmB7C,KAG5B,EAAK6D,mBAAkB,GAfpB,kBAgBI7D,GAhBJ,kCAmBH8D,QAAQC,IAAR,MACA,EAAKF,mBAAkB,GApBpB,0DA7FD,2DAsHNI,YAAc,SAACnE,GACnB,OAAO,EAAK6C,iBAAiBxD,IAAIW,IAvHvB,KA0HN6D,YAAc,SAAC3D,GACnB,IACU,EADJM,EAAO5C,EAAMyG,UAAU7D,KACzBA,IACAN,EAASoE,QAAUpE,EAASqE,UAAWC,MACnC,SAAAvG,GAAC,OAAIA,EAAE4C,WAAaL,EAAKK,YAE7BX,EAASuE,OAASvE,EAASwE,eAAiBlE,EAAKK,SACjDX,EAASyE,KAAT,UAAgBzE,EAASqE,iBAAzB,aAAgB,EAAoBK,MAAK,SAAAC,GAAC,OAAIA,EAAEhE,WAAaX,EAASwE,iBAE1ExE,EAASkC,KAAO,IAAI0C,KAAK5E,EAASkC,MAClC,EAAKS,iBAAiBO,IAAIlD,EAASF,GAAIE,IApI7B,KAuId6D,kBAAoB,SAACgB,GACjB,EAAK7B,eAAiB6B,GAxIZ,KA2IdC,eA3Ic,uCA2IG,WAAOhF,GAAP,SAAA/B,EAAA,6DACb,EAAKgF,SAAU,EADF,kBAGHtD,EAAMC,WAAWF,OAAOM,GAHrB,OAIToE,aAAY,WACR,EAAKvB,iBAAiBnD,OAAOM,GAC7B,EAAKiD,SAAU,KANV,gDAUTe,QAAQC,IAAR,MACAG,aAAY,WACR,EAAKnB,SAAU,KAZV,yDA3IH,2DA4JdgC,eA5Jc,uCA4JG,WAAO/E,GAAP,mBAAAjC,EAAA,6DACPuC,EAAO5C,EAAMyG,UAAU7D,KACvB0E,EAAW,IAAI3C,EAAQ/B,GAFhB,kBAIHb,EAAMC,WAAWK,OAAOC,GAJrB,QAKHiF,EAAc,IAAIxD,EAASzB,IACrBwE,aAAelE,EAAMK,SACjCsE,EAAYZ,UAAY,CAACW,GACzB,EAAKrB,YAAYsB,GACjBf,aAAY,WACR,EAAKrB,iBAAmBoC,KAVnB,kDAcTnB,QAAQC,IAAR,MAdS,0DA5JH,2DA+KdmB,eA/Kc,uCA+KG,WAAOlF,GAAP,SAAAjC,EAAA,+EAEH0B,EAAMC,WAAWO,OAAOD,GAFrB,OAGTkE,aAAY,WACR,GAAIlE,EAASF,GAAI,CACb,IAAIqF,EAAe,2BAAQ,EAAKlB,YAAYjE,EAASF,KAAQE,GAC7D,EAAK2C,iBAAiBO,IAAIlD,EAASF,GAAIqF,GACvC,EAAKtC,iBAAmBsC,MAPvB,+CAWTrB,QAAQC,IAAR,MAXS,wDA/KH,2DA8LdqB,iBA9Lc,sBA8LK,4BAAArH,EAAA,6DACTuC,EAAO5C,EAAMyG,UAAU7D,KAC7B,EAAKyC,SAAU,EAFA,kBAILtD,EAAMC,WAAWQ,OAAO,EAAK2C,iBAAkB/C,IAJ1C,OAKXoE,aAAY,WAAO,IAAD,EACd,aAAI,EAAKrB,wBAAT,aAAI,EAAuBuB,QAAS,CAAC,IAAD,EAChC,EAAKvB,iBAAiBwB,UAAtB,UACI,EAAKxB,iBAAiBwB,iBAD1B,aACI,EAAiCgB,QAAO,SAAAtH,GAAC,OAAIA,EAAE4C,YAAF,OAAeL,QAAf,IAAeA,OAAf,EAAeA,EAAMK,aACtE,EAAKkC,iBAAiBuB,SAAU,MAC7B,CAAC,IAAD,IACGY,EAAW,IAAI3C,EAAQ/B,GAC7B,YAAKuC,wBAAL,mBAAuBwB,iBAAvB,SAAkC5F,KAAKuG,GACvC,EAAKnC,iBAAkBuB,SAAU,EAErC,EAAKzB,iBAAiBO,IAAI,EAAKL,iBAAkB/C,GAAI,EAAK+C,kBAC1D,EAAKE,SAAU,KAhBR,gDAoBXe,QAAQC,IAAR,MApBW,yBAsBXG,aAAY,WACR,EAAKnB,SAAU,KAvBR,4EA9LL,KA0NduC,qBA1Nc,sBA0NS,sBAAAvH,EAAA,6DACnB,EAAKgF,SAAU,EADI,kBAGTtD,EAAMC,WAAWQ,OAAO,EAAK2C,iBAAkB/C,IAHtC,OAIfoE,aAAY,WAAO,IAAD,EACd,EAAKrB,iBAAkB0C,cAAc,UAAC,EAAK1C,wBAAN,aAAC,EAAuB0C,aAC7D,EAAK5C,iBAAiBO,IAAI,EAAKL,iBAAkB/C,GAAI,EAAK+C,qBAN/C,gDASfiB,QAAQC,IAAR,MATe,yBAWfG,aAAY,kBAAM,EAAKnB,SAAU,KAXlB,4EA1NT,KAyOdyC,sBAAwB,WACpB,EAAK3C,sBAAmBf,GA1Od,KA6Od2D,wBAA0B,SAAC9E,GACvB,EAAKgC,iBAAiBY,SAAQ,SAAAvD,GAC1BA,EAASqE,UAAUd,SAAQ,SAAAyB,GACnBA,EAASrE,WAAaA,IACtBqE,EAASU,UAAYV,EAASW,iBAAmBX,EAASW,iBAC1DX,EAASU,WAAaV,EAASU,kBAjP3CE,YAAmB/I,MAEnBgJ,aACI,kBAAM,EAAKtE,UAAUuE,UACrB,WACI,EAAK7C,aAAe,IAAInG,EACxB,EAAK6F,iBAAiBoD,QACtB,EAAKvC,oB,kDAKjB,WACI,OAAOwC,MAAMC,KAAKpJ,KAAK8F,iBAAiBuD,UAAUC,MAAK,SAACpI,EAAGqI,GAAJ,OACnDrI,EAAEmE,KAAMmE,UAAYD,EAAElE,KAAMmE,e,6BAGpC,WACI,OAAO1E,OAAO2E,QACVzJ,KAAK0J,iBAAiBC,QAAO,SAACC,EAAYzG,GACtC,IAAMkC,EAAOwE,kBAAO1G,EAASkC,KAAO,eAEpC,OADAuE,EAAWvE,GAAQuE,EAAWvE,GAAX,sBAAuBuE,EAAWvE,IAAlC,CAAyClC,IAAY,CAACA,GAClEyG,IACR,O,uBAkCX,WACI,IAAM7G,EAAS,IAAI+G,gBAUnB,OATA/G,EAAOoB,OAAO,aAAcnE,KAAKoG,aAAalG,WAAW6J,YACzDhH,EAAOoB,OAAO,WAAYnE,KAAKoG,aAAajG,SAAS4J,YACrD/J,KAAK0E,UAAUgC,SAAQ,SAACF,EAAO1E,GACf,cAARA,EACAiB,EAAOoB,OAAOrC,EAAM0E,EAAewD,eAEnCjH,EAAOoB,OAAOrC,EAAK0E,MAGpBzD,M,cClFMkH,E,WAYjB,aAAe,IAAD,gCAXd1F,QAA0B,KAWZ,KAVd2F,gBAAiB,EAUH,KATdC,WAAY,EASE,KARdjE,SAAU,EAQI,KAPdkE,cAAe,EAOD,KANdC,WAAwB,GAMV,KALdC,mBAAoB,EAKN,KAJdC,UAAY,EAIE,KAHdC,eAAkC,GAGpB,KAFdC,mBAAoB,EAEN,KAgBdC,aAAe,SAACH,GACZ,EAAKA,UAAYA,GAjBP,KA2BdI,YA3Bc,uCA2BA,WAAO7G,GAAP,eAAA5C,EAAA,6DACV,EAAKgJ,gBAAiB,EADZ,kBAGgBtH,EAAMiB,SAASvB,IAAIwB,GAHnC,OAGAS,EAHA,OAIN8C,aAAY,WACR,EAAK9C,QAAUA,EACf,EAAK2F,gBAAiB,KANpB,gDASNjD,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAK6C,gBAAiB,KAVlC,yDA3BA,2DAyCdnG,YAzCc,uCAyCA,WAAOC,GAAP,iBAAA9C,EAAA,6DACV,EAAKiJ,WAAY,EADP,kBAGiBvH,EAAMiB,SAASE,YAAYC,GAH5C,OAGA/C,EAHA,OAIA2J,EAAQ3J,EAASnB,KACvBuH,aAAY,WACW,IAAD,EAAd,EAAK9C,UACL,YAAKA,QAAQsG,cAAb,SAAqBjJ,KAAKgJ,GACtBA,EAAME,QAAWjK,EAAMyG,UAAU7D,OACjC5C,EAAMyG,UAAUyD,SAASH,EAAMvI,KAC/B,EAAKkC,QAAQmB,MAAQkF,EAAMvI,MAGnC,EAAK8H,WAAY,KAbf,gDAiBNlD,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAK8C,WAAY,KAlB7B,yDAzCA,2DA+Dd/F,aA/Dc,uCA+DC,WAAOwG,GAAP,SAAA1J,EAAA,6DACX,EAAKkJ,cAAe,EADT,kBAGDxH,EAAMiB,SAASO,aAAawG,EAAM3H,IAHjC,OAIPpC,EAAMyG,UAAUyD,SAASH,EAAMvI,KAC/BgF,aAAY,WACH,EAAK9C,SAAW,EAAKA,QAAQsG,SAC9B,EAAKtG,QAAQsG,OAAOhD,MAAK,SAAAmD,GAAC,OAAIA,EAAEF,UAASA,QAAS,EAClD,EAAKvG,QAAQsG,OAAOhD,MAAK,SAAAmD,GAAC,OAAIA,EAAE/H,KAAO2H,EAAM3H,MAAK6H,QAAS,EAC3D,EAAKvG,QAAQmB,MAAQkF,EAAMvI,KAE/B,EAAK+H,cAAe,KAXjB,gDAcPnD,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAK+C,cAAe,KAf/B,yDA/DD,2DAkFd/F,YAlFc,uCAkFA,WAAOuG,GAAP,SAAA1J,EAAA,6DACV,EAAKkJ,cAAe,EADV,kBAGDxH,EAAMiB,SAASQ,YAAYuG,EAAM3H,IAHhC,OAINoE,aAAY,WACH,EAAK9C,SAAW,EAAKA,QAAQsG,SAC9B,EAAKtG,QAAQsG,OAAS,EAAKtG,QAAQsG,OAAOrC,QAAO,SAAAwC,GAAC,OAAIA,EAAE/H,KAAO2H,EAAM3H,OAGzE,EAAKmH,cAAe,KATlB,gDAaNnD,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAK+C,cAAe,KAdhC,yDAlFA,2DAoGda,cApGc,uCAoGE,WAAO1G,GAAP,SAAArD,EAAA,6DACZ,EAAKgJ,gBAAiB,EADV,kBAGFtH,EAAMiB,SAASS,YAAYC,GAHzB,OAIR8C,aAAY,WACRxG,EAAMyG,UAAU4D,eAAe3G,EAAQkB,aACnC,EAAKlB,UACL,EAAKA,QAAQqB,IAAMrB,EAAQqB,IAC3B,EAAKrB,QAAQkB,YAAclB,EAAQkB,aAEvC,EAAKyE,gBAAiB,KAVlB,gDAcRjD,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAK6C,gBAAiB,KAfhC,yDApGF,2DAuHd1F,gBAvHc,uCAuHI,WAAOV,EAAkB+E,GAAzB,SAAA3H,EAAA,6DACd,EAAKgF,SAAU,EADD,kBAGJtD,EAAMiB,SAASW,gBAAgBV,GAH3B,OAIVjD,EAAMsK,cAAcvC,wBAAwB9E,GAC5CuD,aAAY,WAAO,IAAD,IACV,EAAK9C,SAAW,EAAKA,QAAQT,YAAb,UAA0BjD,EAAMyG,UAAU7D,YAA1C,aAA0B,EAAsBK,WAAY,EAAKS,QAAQT,WAAaA,IACtG+E,EAAY,EAAKtE,QAAQuE,iBAAmB,EAAKvE,QAAQuE,iBACzD,EAAKvE,QAAQsE,WAAa,EAAKtE,QAAQsE,WAEvC,EAAKtE,SAAW,EAAKA,QAAQT,YAAb,UAA0BjD,EAAMyG,UAAU7D,YAA1C,aAA0B,EAAsBK,YAChE+E,EAAY,EAAKtE,QAAQ6G,iBAAmB,EAAK7G,QAAQ6G,kBAE7D,EAAKf,WAAW3D,SAAQ,SAAAnC,GAChBA,EAAQT,WAAaA,IACrBS,EAAQsE,UAAYtE,EAAQuE,iBAAmBvE,EAAQuE,iBACvDvE,EAAQsE,WAAatE,EAAQsE,cAGrC,EAAK3C,SAAU,KAnBT,gDAsBVe,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAKnB,SAAU,KAvBvB,yDAvHJ,6DAkJdmF,eAlJc,uCAkJG,WAAO3G,GAAP,eAAAxD,EAAA,6DACb,EAAKoJ,mBAAoB,EADZ,kBAGgB1H,EAAMiB,SAASY,eAAe,EAAKF,QAAST,SAAUY,GAHtE,OAGH2F,EAHG,OAKThD,aAAY,WACR,EAAKgD,WAAaA,EAClB,EAAKC,mBAAoB,KAPpB,gDAUTrD,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAKiD,mBAAoB,KAXlC,yDAlJH,2DAiKdgB,kBAjKc,uCAiKM,WAAOxH,EAAkBY,GAAzB,eAAAxD,EAAA,6DAChB,EAAKuJ,mBAAoB,EADT,kBAGiB7H,EAAMiB,SAASc,gBAAgBb,EAAUY,GAH1D,OAGN8F,EAHM,OAIZnD,aAAY,WACR,EAAKmD,eAAiBA,EACtB,EAAKC,mBAAoB,KANjB,gDASZxD,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAKoD,mBAAoB,KAV/B,yDAjKN,wDACV1B,YAAmB/I,MAEnBgJ,aACI,kBAAM,EAAKuB,aACX,SAAAA,GACI,GAAkB,IAAdA,GAAiC,IAAdA,EAAiB,CACpC,IAAM7F,EAA0B,IAAd6F,EAAkB,YAAc,YAClD,EAAKc,eAAe3G,QAEpB,EAAK2F,WAAa,M,+CAUlC,WACI,SAAIxJ,EAAMyG,UAAU7D,OAAQzD,KAAKuE,UACtB1D,EAAMyG,UAAU7D,KAAKK,WAAa9D,KAAKuE,QAAQT,a,KCjC7CyH,E,WAKjB,aAAe,IAAD,gCAJd9H,KAAoB,KAIN,KAHd+H,cAA+B,KAGjB,KAFdC,WAAY,EAEE,KAQdjI,MARc,uCAQN,WAAOkI,GAAP,eAAAxK,EAAA,+EAEmB0B,EAAMU,QAAQE,MAAMkI,GAFvC,OAEMjI,EAFN,OAGA5C,EAAMC,YAAY6K,SAASlI,EAAK7C,OAChCyG,aAAY,kBAAM,EAAK5D,KAAOA,KAC9B9B,GAAQC,KAAK,eACbf,EAAM+K,WAAWC,aANjB,uHARM,2DAqBdnI,SArBc,uCAqBH,WAAOgI,GAAP,eAAAxK,EAAA,+EAEgB0B,EAAMU,QAAQI,SAASgI,GAFvC,OAEGjI,EAFH,OAGH5C,EAAMC,YAAY6K,SAASlI,EAAK7C,OAChCyG,aAAY,kBAAM,EAAK5D,KAAOA,KAC9B9B,GAAQC,KAAK,eACbf,EAAM+K,WAAWC,aANd,uHArBG,2DAkCdC,OAAS,WACLjL,EAAMC,YAAY6K,SAAS,MAC3BI,OAAOC,aAAaC,WAAW,OAC/B,EAAKxI,KAAO,KACZ9B,GAAQC,KAAK,MAtCH,KAyCdsK,QAzCc,sBAyCJ,4BAAAhL,EAAA,+EAEiB0B,EAAMU,QAAQC,UAF/B,OAEIE,EAFJ,OAGF4D,aAAY,WACR,EAAK5D,KAAOA,KAJd,gDAOFwD,QAAQ5F,MAAR,MAPE,yDAzCI,KAoDd0J,SAAW,SAACrF,GACJ,EAAKjC,OACL,EAAKA,KAAKiC,MAAQA,IAtDZ,KA0DdwF,eAAiB,SAACzF,GACV,EAAKhC,OACL,EAAKA,KAAKgC,YAAcA,IA5DlB,KAgEd0G,uBAhEc,sBAgEW,sBAAAjL,EAAA,sDACrB6K,OAAOK,GAAGC,gBAAe,SAAApL,GACG,cAApBA,EAASK,SACT,EAAKkK,cAAgBvK,EAASqL,aAAa1I,gBAH9B,2CAhEX,KAwEd2I,cAAgB,WACZ,EAAKd,WAAY,EACjB,IAAMe,EAAW,SAAC5I,GACdhB,EAAMU,QAAQK,QAAQC,GAAarB,MAAK,SAAAkB,GACpC5C,EAAMC,YAAY6K,SAASlI,EAAK7C,OAChCyG,aAAY,WACR,EAAK5D,KAAOA,EACZ,EAAKgI,WAAY,KAErB9J,GAAQC,KAAK,kBACd6K,OAAM,SAAApL,GACL4F,QAAQC,IAAI7F,GACZgG,aAAY,kBAAM,EAAKoE,WAAY,SAIvC,EAAKD,cACLgB,EAAS,EAAKhB,eAEdO,OAAOK,GAAG5I,OAAM,SAAAvC,GACZuL,EAASvL,EAASqL,aAAa1I,eAChC,CAAC8I,MAAO,0BA5Ff3D,YAAmB/I,M,4CAGvB,WACI,QAASA,KAAKyD,S,KCCT5C,EAAe,CACxBsK,cAAe,IAAItF,EACnB/E,YAAa,ICXb,aAAe,IAAD,gCAJdO,MAA4B,KAId,KAHdT,MAAuBmL,OAAOC,aAAaW,QAAQ,OAGrC,KAFdC,WAAY,EAEE,KAed5K,eAAiB,SAACX,GACd,EAAKA,MAAQA,GAhBH,KAmBdsK,SAAW,SAAC/K,GACR,EAAKA,MAAQA,GApBH,KAuBdiM,aAAe,WACX,EAAKD,WAAY,GAvBjB7D,YAAmB/I,MAEnBgJ,aACI,kBAAM,EAAKpI,SACX,SAAAA,GACQA,EACAmL,OAAOC,aAAac,QAAQ,MAAOlM,GAEnCmL,OAAOC,aAAaC,WAAW,WDG/C3E,UAAW,IAAIiE,EACfK,WAAa,IERb,aAAe,IAAD,gCALdmB,MAAgB,CACZC,MAAM,EACNxK,KAAM,MAGI,KAIdyK,UAAY,SAACC,GACT,EAAKH,MAAMC,MAAO,EAClB,EAAKD,MAAMvK,KAAO0K,GANR,KASdrB,WAAa,WACT,EAAKkB,MAAMC,MAAO,EAClB,EAAKD,MAAMvK,KAAO,MAVlBuG,YAAmB/I,KAAK+M,QFQ5BI,aAAc,IAAIlD,EAClBmD,aAAc,IGdd,aAAe,IAAD,gCAHdC,SAA0B,GAGZ,KAFdC,cAAsC,KAExB,KAIdC,oBAAsB,SAACC,GACf3M,EAAMsK,cAAcnF,mBACpB,EAAKsH,eAAgB,IAAIG,KACpBC,QAAQnN,oBAAmDiN,EAAY,CACpEG,mBAAoB,kCAAM9M,EAAMyG,UAAU7D,YAAtB,aAAM,EAAsB7C,SAEnDgN,yBACAC,iBAAiBC,IAASC,aAC1BC,QAEL,EAAKV,cAAcW,QAAQxB,OAAM,SAAApL,GAAK,OAAI4F,QAAQC,IAAI,sCAAwC7F,MAE9F,EAAKiM,cAAcY,GAAG,gBAAgB,SAACb,GACnChG,aAAY,WACRgG,EAAS3G,SAAQ,SAAAyH,GACbA,EAAQC,UAAY,IAAIrG,KAAKoG,EAAQC,UAAW,QAEpD,EAAKf,SAAWA,QAIxB,EAAKC,cAAcY,GAAG,kBAAkB,SAACC,GACrC9G,aAAY,WACR8G,EAAQC,UAAY,IAAIrG,KAAKoG,EAAQC,WACrC,EAAKf,SAASgB,QAAQF,WA5BxB,KAkCdG,iBAAmB,WAAO,IAAD,EACrB,YAAKhB,qBAAL,SAAoBiB,OAAO9B,OAAM,SAAApL,GAAK,OAAI4F,QAAQC,IAAI,iCAAmC7F,OAnC/E,KAsCdmN,cAAgB,WACZ,EAAKnB,SAAW,GAChB,EAAKiB,oBAxCK,KA2CdG,WA3Cc,uCA2CD,WAAOpF,GAAP,iBAAAnI,EAAA,6DACTmI,EAAOmE,WAAP,UAAoB3M,EAAMsK,cAAcnF,wBAAxC,aAAoB,EAAsC/C,GADjD,4BAGC,EAAKqK,qBAHN,aAGC,EAAoBoB,OAAO,cAAerF,GAH3C,sDAKLpC,QAAQC,IAAR,MALK,wDA3CC,sDACV6B,YAAmB/I,QHgBd2O,EAAeC,wBAAc/N,GAEnC,SAASgO,IACZ,OAAOC,qBAAWH,G,WItBPI,eAAS,WACpB,MAAwCF,IAAhCvH,UAAa7D,EAArB,EAAqBA,KAAMqI,EAA3B,EAA2BA,OAE3B,OACI,cAACkD,EAAA,EAAD,CAAMC,UAAQ,EAACC,MAAM,MAArB,SACI,eAACC,EAAA,EAAD,WACI,eAACH,EAAA,EAAKI,KAAN,CAAWC,GAAIC,IAASC,GAAG,IAAIC,OAAK,EAACC,QAAM,EAA3C,UACI,qBAAKC,IAAI,mBAAmBC,IAAI,OAAOC,MAAO,CAAEC,YAAa,MADjE,mBAIA,cAACb,EAAA,EAAKI,KAAN,CAAWC,GAAIC,IAASC,GAAG,cAAcO,KAAK,eAC9C,cAACd,EAAA,EAAKI,KAAN,CAAWC,GAAIC,IAASC,GAAG,UAAUO,KAAK,WAC1C,cAACd,EAAA,EAAKI,KAAN,UACI,cAACW,EAAA,EAAD,CAAQV,GAAIC,IAASC,GAAG,kBAAkBS,UAAQ,EAAC9C,QAAQ,sBAE/D,eAAC8B,EAAA,EAAKI,KAAN,CAAWa,SAAS,QAApB,UACI,cAACC,EAAA,EAAD,CAAOR,KAAS,OAAJjM,QAAI,IAAJA,OAAA,EAAAA,EAAMiC,QAAS,mBAAoByK,QAAM,EAACC,OAAO,UAC7D,cAACC,EAAA,EAAD,CAAUC,SAAS,WAAWC,KAAI,OAAE9M,QAAF,IAAEA,OAAF,EAAEA,EAAMgC,YAA1C,SACI,eAAC4K,EAAA,EAASrB,KAAV,WACI,cAACqB,EAAA,EAASjB,KAAV,CAAeC,GAAImB,IACfjB,GAAE,2BAAe9L,QAAf,IAAeA,OAAf,EAAeA,EAAMK,UACvB2M,KAAK,OACLF,KAAK,eAET,cAACF,EAAA,EAASjB,KAAV,CACIsB,QAAS5E,EACTyE,KAAK,SACLE,KAAK,0B,8DC5BtB1B,eAAS,WACpB,MAAuDF,IAA/C1D,cAAiBzG,EAAzB,EAAyBA,UAAW6B,EAApC,EAAoCA,aACpC,OACI,qCACI,eAACyI,EAAA,EAAD,CAAM2B,UAAQ,EAACC,KAAK,QAAQhB,MAAO,CAAEiB,MAAO,OAAQC,UAAW,IAA/D,UACI,cAACC,EAAA,EAAD,CAAQN,KAAK,SAASO,UAAQ,EAACC,MAAM,OAAO/D,QAAQ,YACpD,cAAC8B,EAAA,EAAKI,KAAN,CACIlC,QAAQ,iBACRgE,OAAQxM,EAAUyM,IAAI,OACtBT,QAAS,kBAAMnK,EAAa,MAAO,WAEvC,cAACyI,EAAA,EAAKI,KAAN,CACIlC,QAAQ,YACRgE,OAAQxM,EAAUyM,IAAI,WACtBT,QAAS,kBAAMnK,EAAa,UAAW,WAE3C,cAACyI,EAAA,EAAKI,KAAN,CACIlC,QAAQ,cACRgE,OAAQxM,EAAUyM,IAAI,UACtBT,QAAS,kBAAMnK,EAAa,SAAU,cAG9C,cAACwK,EAAA,EAAD,IACA,cAAC,IAAD,CACIK,SAAU,SAAC/L,GAAD,OAAUkB,EAAa,YAAalB,IAC9CmB,MAAO9B,EAAUpC,IAAI,cAAgB,IAAIyF,a,+ECrB1CgH,gBAAS,YAA2C,IAAD,EAAlBxK,EAAkB,EAAlBA,QAC5C,EAAoCsK,IAA5B1B,EAAR,EAAQA,aAAc7F,EAAtB,EAAsBA,UACd9C,EAA6B2I,EAA7B3I,gBAAiB0B,EAAYiH,EAAZjH,QAEzB,IAAI,UAAAoB,EAAU7D,YAAV,eAAgBK,YAAaS,EAAQT,SAAU,OAAO,KAO1D,OACI,eAACuN,GAAA,EAAD,CAAQC,SAAS,OAAjB,UACI,cAACD,GAAA,EAAOE,QAAR,CAAgBC,SAAO,EAAC5B,MAAO,CAAEiB,MAAO,QAAxC,SACI,cAACd,EAAA,EAAD,CACI0B,OAAK,EACLR,MAAM,OACN/D,QAAS3I,EAAQsE,UAAY,YAAc,oBAInD,cAACwI,GAAA,EAAOE,QAAR,CAAgBG,QAAM,EAAC9B,MAAO,CAAEiB,MAAO,QAAvC,SACI,cAACd,EAAA,EAAD,CAAQ0B,OAAK,EACTR,MAAO1M,EAAQsE,UAAY,MAAQ,QACnCqE,QAAS3I,EAAQsE,UAAY,WAAa,SAC1C3C,QAASA,EACTwK,QAAS,SAACiB,GAAD,OApBzB,SAAsBA,EAAmB7N,GACrC6N,EAAEC,iBACFrN,EAAQsE,UAAYrE,EAAgBV,GAAU,GAASU,EAAgBV,GAAU,GAkBrD+N,CAAaF,EAAGpN,EAAQT,qBCzB7CiL,gBAAS,YAA0C,IAC7C+C,EAD0BvN,EAAkB,EAAlBA,QAK3C,OACI,eAACwN,GAAA,EAAD,CAAM1C,GAAImB,IAAMjB,GAAE,oBAAehL,EAAQT,UAAzC,UACI,cAACoM,EAAA,EAAD,CAAOR,IAAKnL,EAAQmB,OAAS,qBAC7B,eAACqM,GAAA,EAAKR,QAAN,WACI,cAACQ,GAAA,EAAKhB,OAAN,UAAcxM,EAAQkB,cACtB,cAACsM,GAAA,EAAKC,YAAN,UACI,sBAAMpC,MAAO,CAAEqC,SAAU,SAAUC,aAAc,YAAjD,SACK3N,EAAQqB,KAXZkM,EAW0BvN,EAAQqB,IAVxCkM,EAAIK,OAAS,GAAKL,EAAIM,UAAU,EAAG,IAAM,MAAQN,GAUD,4BAInD,eAACC,GAAA,EAAKR,QAAN,CAAcc,OAAK,EAAnB,UACI,cAACC,GAAA,EAAD,CAAMxC,KAAK,SACVvL,EAAQuE,eAFb,gBAIA,cAAC,GAAD,CAAcvE,QAASA,UCpBpBwK,gBAAS,YAAyD,IAArBvH,EAAoB,EAApBA,UAClD+K,EAAS,CACXC,YAAa,SACbC,YAAa,GAGjB,OACI,cAACC,GAAA,EAAD,CAAMC,YAAU,EAAhB,SACKnL,EAAUoL,KAAI,SAAAzK,GAAQ,OACnB,cAAC0K,GAAA,EAAD,CAAOC,WAAS,EAAyBC,QACrC,cAACL,GAAA,EAAKtD,KAAN,CAAmCC,GAAImB,IAAMjB,GAAE,oBAAepH,EAASrE,UAAvE,SACI,cAACoM,EAAA,EAAD,CACAU,KAAK,OACLoC,UAAQ,EAACtD,IAAKvH,EAASzC,OAAS,mBAChCuN,UAAQ,EACRrD,MAAOzH,EAASU,UAAY0J,EAAS,QALzBpK,EAASrE,UAD7B,SAUI,cAAC+O,GAAA,EAAMtB,QAAP,UACI,cAAC,GAAD,CAAahN,QAAS4D,OAXRA,EAASrE,kBCThC,SAASoP,GAAT,GAAgD,IAAD,IAAnB/P,EAAmB,EAAnBA,SAEvC,OACI,eAACgQ,GAAA,EAAQC,MAAT,WACI,eAACD,GAAA,EAAD,WACKhQ,EAASuF,aACN,cAAC2K,GAAA,EAAD,CAAOrC,SAAS,MACZpB,MAAO,CAAE0D,UAAW,UACpBrC,MAAM,MACN/D,QAAQ,cAEhB,cAACkC,GAAA,EAAKgE,MAAN,UACI,eAAChE,GAAA,EAAD,WACI,cAACA,GAAA,EAAKc,MAAN,CAAYN,MAAO,CAAE2D,aAAc,GAAK3C,KAAK,OAAOoC,UAAQ,EAACtD,KAAK,UAAAvM,EAASyE,YAAT,eAAelC,QAAS,qBAC1F,eAAC0J,GAAA,EAAKmC,QAAN,WACI,cAACnC,GAAA,EAAK2B,OAAN,CAAa1B,GAAImB,IAAMjB,GAAE,sBAAiBpM,EAASF,IAAnD,SAA2DE,EAAS+B,QACpE,eAACkK,GAAA,EAAK4C,YAAN,wBAA4B,cAAC,IAAD,CAAMzC,GAAE,oBAAepM,EAASwE,cAAhC,mBACvBxE,EAASyE,YADc,aACvB,EAAenC,iBAEnBtC,EAASuE,QACN,cAAC0H,GAAA,EAAK4C,YAAN,UACI,cAACqB,GAAA,EAAD,CAAOG,OAAK,EAACvC,MAAM,SAAnB,8CAKP9N,EAASoE,UAAYpE,EAASuE,QAC3B,cAAC0H,GAAA,EAAK4C,YAAN,UACI,cAACqB,GAAA,EAAD,CAAOG,OAAK,EAACvC,MAAM,QAAnB,0DASxB,cAACkC,GAAA,EAAD,UACI,iCACI,cAACb,GAAA,EAAD,CAAMxC,KAAK,UADf,IAC2BjG,kBAAO1G,EAASkC,KAAO,0BAC9C,cAACiN,GAAA,EAAD,CAAMxC,KAAK,SAASF,MAAO,CAAE6D,WAAY,MAF7C,IAEuDtQ,EAASoC,WAGpE,cAAC4N,GAAA,EAAD,CAASO,WAAS,EAAlB,SACI,cAAC,GAAD,CAA0BlM,UAAWrE,EAASqE,cAElD,eAAC2L,GAAA,EAAD,CAASQ,UAAQ,EAAjB,UACI,qCAAQxQ,EAASiC,YAAjB,OACA,cAAC2K,EAAA,EAAD,CAAQV,GAAImB,IAAMjB,GAAE,sBAAiBpM,EAASF,IAAMiK,QAAQ,OAAO+D,MAAM,OAAO2C,QAAQ,gBCnDzF7E,oBAAS,WACpB,IACQ8E,EADkBhF,IAAlB1D,cACA0I,kBAIR,OACI,mCACKA,EAAkBjB,KAAI,mCAAEkB,EAAF,KAASlK,EAAT,YACnB,eAAC,WAAD,WACI,cAACmH,EAAA,EAAD,CAAQgD,KAAG,EAAC9C,MAAM,OAAlB,SACK6C,IAEJlK,EAAWgJ,KAAI,SAAAzP,GAAQ,OACpB,cAAC+P,GAAD,CAAoC/P,SAAUA,GAAvBA,EAASF,SALzB6Q,W,UCdhB,SAASE,KACpB,OACI,cAAC,WAAD,UACI,cAACC,GAAA,EAAD,CAAaxC,OAAK,EAAC7B,MAAO,CAAEkB,UAAW,IAAvC,SACI,eAACqC,GAAA,EAAQC,MAAT,WACI,cAACD,GAAA,EAAD,CAASvD,MAAO,CAAEsE,UAAW,KAA7B,SACI,eAACD,GAAA,EAAD,WACI,eAACA,GAAA,EAAYlD,OAAb,CAAoBrL,OAAK,EAAzB,UACI,cAACuO,GAAA,EAAYE,KAAb,IACA,cAACF,GAAA,EAAYE,KAAb,OAEJ,cAACF,GAAA,EAAYG,UAAb,UACI,cAACH,GAAA,EAAYE,KAAb,WAIZ,cAAChB,GAAA,EAAD,UACI,eAACc,GAAA,EAAD,WACI,cAACA,GAAA,EAAYE,KAAb,IACA,cAACF,GAAA,EAAYE,KAAb,SAGR,cAAChB,GAAA,EAAD,CAASO,WAAS,EAAC9D,MAAO,CAAEsE,UAAW,MACvC,cAACf,GAAA,EAAD,CAASQ,UAAQ,EAAjB,SACI,cAAC5D,EAAA,EAAD,CAAQsE,UAAQ,EAACpD,MAAM,OAAO2C,QAAQ,QAAQ1G,QAAQ,kBCf/D6B,oBAAS,WACpB,IAAQ5D,EAAkB0D,IAAlB1D,cACAxE,EAAkEwE,EAAlExE,eAAgBb,EAAkDqF,EAAlDrF,iBAAkBQ,EAAgC6E,EAAhC7E,gBAAiBvG,EAAeoL,EAAfpL,WAC3D,EAAsCuU,oBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAaA,OALAC,qBAAU,WACF3O,EAAiB8K,KAAO,GAAGjK,MAChC,CAACb,EAAkBa,IAIlB,eAAC+N,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,OAAN,CAAa9D,MAAM,KAAnB,SACK1F,EAAchF,iBAAmBoO,EAC9B,qCACI,cAACP,GAAD,IACA,cAACA,GAAD,OAGJ,cAAC,IAAD,CACIY,UAAW,EACXC,SAtBpB,WACIL,GAAe,GACflO,EAAgB,IAAIrG,EAAaF,EAAY+U,YAAc,IAC3DnO,IAAiBpE,MAAK,kBAAMiS,GAAe,OAoB3BO,SAAUR,KAAiBxU,GACpBA,EAAW+U,YAAc/U,EAAWiV,WAC3CC,aAAa,EALjB,SAOI,cAAC,GAAD,QAIZ,cAACP,EAAA,EAAKC,OAAN,CAAa9D,MAAM,IAAnB,SACI,cAAC,EAAD,MAEJ,cAAC6D,EAAA,EAAKC,OAAN,CAAa9D,MAAO,GAApB,SACI,cAACqE,EAAA,EAAD,CAAQhE,OAAQqD,Y,sCCzCjB,SAASY,GAAYC,GAChC,MAAsBC,aAASD,EAAMtF,MAArC,mBAAOwF,EAAP,KAAcC,EAAd,KAEA,OACI,eAACC,GAAA,EAAKC,MAAN,CAAYpU,MAAOkU,EAAKG,WAAaH,EAAKlU,MAA1C,UACI,sCAAS+T,EAAMO,MAAf,OACA,iDAAWL,GAAWF,IACrBG,EAAKG,SAAWH,EAAKlU,MAClB,eAACgS,GAAA,EAAD,CAAOG,OAAK,EAACvC,MAAM,MAAnB,cAA4BsE,EAAKlU,MAAjC,OACA,QCZD0N,oBAAS,WACpB,IAAOzH,EAAauH,IAAbvH,UACP,OACI,cAAC,KAAD,CACIsO,cAAe,CAACC,MAAO,GAAIC,SAAU,GAAIzU,MAAO,MAChD0U,SAAU,SAAC1M,EAAD,OAAU2M,EAAV,EAAUA,UAAV,OAAyB1O,EAAU9D,MAAM6F,GAC9CoD,OAAM,SAAApL,GAAK,OAAI2U,EAAU,CAAC3U,MAAO,kCAH1C,SAMK,gBAAE4U,EAAF,EAAEA,aAAcC,EAAhB,EAAgBA,aAAczU,EAA9B,EAA8BA,OAA9B,OACG,eAAC,KAAD,CAAM0U,UAAU,UAAUJ,SAAUE,EAAcG,aAAa,MAA/D,UACI,cAACrF,EAAA,EAAD,CAAQ1B,GAAG,KAAKnC,QAAQ,yBAAyB+D,MAAM,OAAOqC,UAAU,WACxE,cAAC6B,GAAD,CAAarF,KAAK,QAAQuG,YAAY,UACtC,cAAClB,GAAD,CAAarF,KAAK,WAAWuG,YAAY,WAAWC,KAAK,aACzD,cAAC,KAAD,CACIxG,KAAK,QAAQyG,OAAQ,kBACrB,cAAClD,GAAA,EAAD,CAAOzD,MAAO,CAAC2D,aAAc,IAAKC,OAAK,EAACvC,MAAM,MAAM/D,QAASzL,EAAOJ,WAExE,cAAC0O,EAAA,EAAD,CAAQ7J,QAASgQ,EAAclG,UAAQ,EAAC9C,QAAQ,QAAQoJ,KAAK,SAAS7E,OAAK,a,mBCnBhF,SAAS+E,GAAT,GAA4C,IAAjB/U,EAAgB,EAAhBA,OACtC,OACI,cAACgV,GAAA,EAAD,CAASpV,OAAK,EAAd,SACKI,GACG,cAACgV,GAAA,EAAQ/D,KAAT,UACKjR,EAAOmR,KAAI,SAAC8D,EAAUC,GAAX,OACR,cAACF,GAAA,EAAQrH,KAAT,UAAwBsH,GAALC,UCH5B5H,oBAAS,WACpB,IAAOzH,EAAauH,IAAbvH,UACP,OACI,cAAC,KAAD,CACIsO,cAAe,CAAEnQ,YAAY,GAAI3B,SAAU,GAAM+R,MAAO,GAAIC,SAAU,GAAIzU,MAAO,MACjF0U,SAAU,SAAC1M,EAAD,OAAU2M,EAAV,EAAUA,UAAV,OAAyB1O,EAAU5D,SAAS2F,GACjDoD,OAAM,SAAApL,GAAK,OAAI2U,EAAU,CAAC3U,cAE/BuV,iBAAkBC,KAAW,CACzBpR,YAAaoR,OAAaC,WAC1BhT,SAAU+S,OAAaC,WACvBjB,MAAOgB,OAAaC,WAAWjB,QAC/BC,SAAUe,OAAaC,aAT/B,SAYK,gBAAEb,EAAF,EAAEA,aAAcC,EAAhB,EAAgBA,aAAczU,EAA9B,EAA8BA,OAAQsV,EAAtC,EAAsCA,QAASC,EAA/C,EAA+CA,MAA/C,OACG,eAAC,KAAD,CAAMb,UAAU,gBAAgBJ,SAAUE,EAAcG,aAAa,MAArE,UACI,cAACrF,EAAA,EAAD,CAAQ1B,GAAG,KAAKnC,QAAQ,2BAA2B+D,MAAM,OAAOqC,UAAU,WAC1E,cAAC6B,GAAD,CAAarF,KAAK,cAAcuG,YAAY,SAC5C,cAAClB,GAAD,CAAarF,KAAK,WAAWuG,YAAY,aACzC,cAAClB,GAAD,CAAarF,KAAK,QAAQuG,YAAY,UACtC,cAAClB,GAAD,CAAarF,KAAK,WAAWuG,YAAY,WAAWC,KAAK,aACzD,cAAC,KAAD,CACIxG,KAAK,QAAQyG,OAAQ,kBACrB,cAACC,GAAD,CAAkB/U,OAAQA,EAAOJ,WAErC,cAAC0O,EAAA,EAAD,CAAQsE,UAAW0C,IAAYC,GAASd,EACxChQ,QAASgQ,EAAclG,UAAQ,EAAC9C,QAAQ,WAAWoJ,KAAK,SAAS7E,OAAK,aC7B3E1C,gBAAS,WACpB,MAAkCF,IAA1BvH,EAAR,EAAQA,UAAWsE,EAAnB,EAAmBA,WACnB,OACI,cAACuH,GAAA,EAAD,CAASlE,UAAQ,EAACqE,UAAU,SAAS3C,UAAQ,EAACwF,UAAU,WAAxD,SACI,eAAChH,EAAA,EAAD,CAAWoB,MAAI,EAAf,UACI,eAACQ,EAAA,EAAD,CAAQ1B,GAAG,KAAKJ,UAAQ,EAAxB,UACI,cAACiB,EAAA,EAAD,CAAOU,KAAK,UAAUlB,IAAI,mBAAmBC,IAAI,OAAOC,MAAO,CAAE2D,aAAc,MADnF,mBAICjM,EAAU2P,WACP,qCACI,cAAClG,EAAA,EAAD,CAAQ1B,GAAG,KAAKJ,UAAQ,EAAC/B,QAAQ,6BACjC,cAAC6C,EAAA,EAAD,CAAQV,GAAImB,IAAMjB,GAAG,cAAcqB,KAAK,OAAO3B,UAAQ,EAAvD,kCAGJ,qCACI,cAACc,EAAA,EAAD,CACIW,QAAS,kBAAM9E,EAAWqB,UAAU,cAAC,GAAD,MACpC2D,KAAK,OAAO3B,UAAQ,EAFxB,mBAIA,cAACc,EAAA,EAAD,CACIW,QAAS,kBAAM9E,EAAWqB,UAAU,cAAC,GAAD,MACpC2D,KAAK,OAAO3B,UAAQ,EAFxB,sBAIA,cAACiI,GAAA,EAAD,CAASvE,YAAU,EAAC1D,UAAQ,EAA5B,gBACA,cAACc,EAAA,EAAD,CACIa,KAAK,OACL1K,QAASoB,EAAUmE,UACnBwD,UAAQ,EACRgC,MAAM,WACN/D,QAAQ,sBACRwD,QAASpJ,EAAUiF,2B,UC/BhC,SAAS4K,GAAT,GAA6E,IAAD,IAAjDlI,gBAAiD,aAAhC/B,eAAgC,MAAtB,aAAsB,EACvF,OACI,cAACkK,GAAA,EAAD,CAAQlG,QAAQ,EAAMjC,SAAUA,EAAhC,SACI,cAACiG,EAAA,EAAD,CAAQhI,QAASA,M,cCAd,SAASmK,GAAWjC,GAC/B,MAAsBC,aAASD,EAAMtF,MAArC,mBAAOwF,EAAP,KAAcC,EAAd,KACA,OACI,eAACC,GAAA,EAAKC,MAAN,CAAYpU,MAAOkU,EAAKG,WAAaH,EAAKlU,MAA1C,UACI,sCAAS+T,EAAMO,MAAf,OACA,oDAAcL,GAAWF,IACxBG,EAAKG,SAAWH,EAAKlU,MAClB,eAACgS,GAAA,EAAD,CAAOG,OAAK,EAACvC,MAAM,MAAnB,cAA4BsE,EAAKlU,MAAjC,OACA,QCnBT,IAAMiW,GAAkB,CAC3B,CAAC/G,KAAM,SAAU/J,MAAO,UACxB,CAAC+J,KAAM,UAAW/J,MAAO,WACzB,CAAC+J,KAAM,OAAQ/J,MAAO,QACtB,CAAC+J,KAAM,OAAQ/J,MAAO,QACtB,CAAC+J,KAAM,QAAS/J,MAAO,SACvB,CAAC+J,KAAM,SAAU/J,MAAO,W,UCMb,SAAS+Q,GAAcnC,GAClC,MAA+BC,aAASD,EAAMtF,MAA9C,mBAAOwF,EAAP,KAAcC,EAAd,KAAoBiC,EAApB,KAEA,OACI,eAAChC,GAAA,EAAKC,MAAN,CAAYpU,MAAOkU,EAAKG,WAAaH,EAAKlU,MAA1C,UACA,sCAAS+T,EAAMO,MAAf,OACA,cAAC8B,GAAA,EAAD,CACIC,WAAS,EACTC,QAASvC,EAAMuC,QACfnR,MAAO8O,EAAM9O,OAAS,KACtB4K,SAAU,SAACO,EAAGiG,GAAJ,OAAUJ,EAAQK,SAASD,EAAEpR,QACvCsR,OAAQ,kBAAMN,EAAQO,YAAW,IACjC1B,YAAajB,EAAMiB,cAEtBd,EAAKG,SAAWH,EAAKlU,MAClB,eAACgS,GAAA,EAAD,CAAOG,OAAK,EAACvC,MAAM,MAAnB,cAA4BsE,EAAKlU,MAAjC,OACA,Q,yBCtBG,SAAS2W,GAAY5C,GAChC,MAA+BC,aAASD,EAAMtF,MAA9C,mBAAOwF,EAAP,KAAcC,EAAd,KAAoBiC,EAApB,KAEA,OACI,eAAChC,GAAA,EAAKC,MAAN,CAAYpU,MAAOkU,EAAKG,WAAaH,EAAKlU,MAA1C,UACI,cAAC,KAAD,uCACQiU,GACAF,GAFR,IAGI6C,SAAW3C,EAAM9O,OAAS,IAAIuB,KAAKuN,EAAM9O,QAAW,KACpD4K,SAAU,SAAA5K,GAAK,OAAIgR,EAAQK,SAASrR,OAEvC+O,EAAKG,SAAWH,EAAKlU,MAClB,eAACgS,GAAA,EAAD,CAAOG,OAAK,EAACvC,MAAM,MAAnB,cAA4BsE,EAAKlU,MAAjC,OACA,QCDD0N,oBAAS,WACpB,IAAMpN,EAAUuW,eACR/M,EAAkB0D,IAAlB1D,cACAjD,EAC8BiD,EAD9BjD,eAAgBG,EACc8C,EADd9C,eACnBlB,EAAiCgE,EAAjChE,aAAchB,EAAmBgF,EAAnBhF,eAEXlD,EAAOkV,eAAPlV,GACR,EAAgCqR,mBAA6B,IAAItP,GAAjE,mBAAO7B,EAAP,KAAiB2D,EAAjB,KAEA2N,qBAAU,WACFxR,GAAIkE,EAAalE,GAAIV,MAAK,SAAAY,GAAQ,OAAI2D,EAAY,IAAI9B,EAAmB7B,SAE9E,CAACF,EAAIkE,IAER,IAAMyP,EAAmBC,KAAW,CAChC3R,MAAO2R,OAAaC,SAAS,kCAC7B1R,YAAayR,OAAaC,SAAS,gCACnC3R,SAAU0R,OAAaC,SAAS,4BAChCzR,KAAMwR,OAAaC,SAAS,wBAAwBsB,WACpD9S,KAAMuR,OAAaC,SAAS,wBAC5BvR,MAAOsR,OAAaC,SAAS,2BAkBjC,OAAI7T,GACIkD,EAAuB,cAACgR,GAAD,CAAkBjK,QAAQ,wBAGrD,eAACiG,GAAA,EAAD,CAASQ,UAAQ,EAAjB,UACI,cAAC5C,EAAA,EAAD,CAAQ7D,QAAQ,mBAAmB6G,KAAG,EAAC9C,MAAM,SAC7C,cAAC,KAAD,CAAQoH,oBAAkB,EACtBzC,cAAezS,EACfyT,iBAAkBA,EAClBb,SAAU,SAAA1M,GAAM,OAvB5B,SAA0BlG,GACtB,GAAKA,EAASF,GAQVoF,EAAelF,GAAUZ,MAAK,kBAAMZ,EAAQC,KAAR,sBAA4BuB,EAASF,YAR3D,CACd,IAAImF,EAAW,2BACRjF,GADQ,IAEXF,GAAIqV,iBAERpQ,EAAeE,GAAa7F,MAAK,kBAAMZ,EAAQC,KAAR,sBAA4BwG,EAAYnF,SAiBvDsV,CAAiBlP,IAHzC,SAIK,gBAAG4M,EAAH,EAAGA,aAAcc,EAAjB,EAAiBA,QAASb,EAA1B,EAA0BA,aAAcc,EAAxC,EAAwCA,MAAxC,OACG,eAAC,KAAD,CAAMb,UAAU,UAAUJ,SAAUE,EAAcG,aAAa,MAA/D,UACI,cAACjB,GAAD,CAAarF,KAAK,QAAQuG,YAAY,UACtC,cAACgB,GAAD,CAAYhB,YAAY,cAAcvG,KAAK,cAAc0I,KAAM,IAC/D,cAACjB,GAAD,CAAelB,YAAY,WAAWvG,KAAK,WAAW6H,QAASL,KAC/D,cAACU,GAAD,CAAaS,gBAAgB,OAC3B3I,KAAK,OACL4I,gBAAc,EACdC,YAAY,OACZC,WAAW,0BAGb,cAAC7H,EAAA,EAAD,CAAQ7D,QAAQ,mBAAmB6G,KAAG,EAAC9C,MAAM,SAC7C,cAACkE,GAAD,CAAakB,YAAY,OAAOvG,KAAK,SACrC,cAACqF,GAAD,CAAakB,YAAY,QAAQvG,KAAK,UAEtC,cAACC,EAAA,EAAD,CACI7J,QAASgQ,EACTtC,QAAQ,QACR5D,UAAQ,EACRsG,KAAK,SACLjC,SAAU6B,IAAiBc,IAAUD,EACrC7J,QAAQ,WACZ,cAAC6C,EAAA,EAAD,CAAQV,GAAImB,IAAMjB,GAAG,cAAcqE,QAAQ,QAAQ0C,KAAK,SAASpJ,QAAQ,uB,oBC5ElF6B,gBAAS,YAAsD,IAAtBvB,EAAqB,EAArBA,WAC5CJ,EAAiByB,IAAjBzB,aAWR,OATAqH,qBAAU,WAIN,OAHIjH,GACAJ,EAAaG,oBAAoBC,GAE9B,WACHJ,EAAaoB,mBAElB,CAACpB,EAAcI,IAGd,qCACI,cAAC2F,GAAA,EAAD,CACIG,UAAU,SACVtC,SAAS,MACT/B,UAAQ,EACRgC,MAAM,OACNrB,MAAO,CAAEiJ,OAAQ,QALrB,SAOI,cAAC9H,EAAA,EAAD,sCAEJ,eAACoC,GAAA,EAAD,CAASnC,UAAQ,EAAC2C,UAAQ,EAA1B,UACI,cAAC,KAAD,CACIoC,SAAU,SAAC1M,EAAD,OAAWyP,EAAX,EAAWA,UAAX,OACN1L,EAAaqB,WAAWpF,GAAQ9G,MAAK,kBAAMuW,QAC/ClD,cAAe,CAAEpT,KAAM,IACvBoU,iBAAkBC,KAAW,CACzBrU,KAAMqU,OAAaC,aAL3B,SAQK,gBAAGZ,EAAH,EAAGA,aAAca,EAAjB,EAAiBA,QAASd,EAA1B,EAA0BA,aAA1B,OACG,cAAC,KAAD,CAAME,UAAU,UAAhB,SACI,cAAC,KAAD,CAAOrG,KAAK,OAAZ,SACK,SAACsF,GAAD,OACG,sBAAKxF,MAAO,CAAEK,SAAU,YAAxB,UACI,cAACiF,EAAA,EAAD,CAAQhE,OAAQgF,IAChB,kDACIG,YAAY,kEACZmC,KAAM,GACFpD,EAAME,OAHd,IAIIyD,WAAY,SAAApH,GACM,UAAVA,EAAE7P,KAAmB6P,EAAEqH,UAEb,UAAVrH,EAAE7P,KAAoB6P,EAAEqH,WACxBrH,EAAEC,iBACFmF,GAAWd,oBAU/C,cAACgD,GAAA,EAAQ7F,MAAT,UACKhG,EAAaC,SAASuF,KAAI,SAAAzE,GAAO,OAC9B,eAAC8K,GAAA,EAAD,WACI,cAACA,GAAA,EAAQC,OAAT,CAAgBxJ,IAAKvB,EAAQzI,OAAS,qBACtC,eAACuT,GAAA,EAAQ1H,QAAT,WACI,cAAC0H,GAAA,EAAQE,OAAT,CACI9J,GAAImB,IACJjB,GAAE,oBAAepB,EAAQrK,UAF7B,SAGKqK,EAAQ1I,cAEb,cAACwT,GAAA,EAAQG,SAAT,UACI,gCAAMC,aAAoBlL,EAAQC,WAAlC,YAEJ,eAAC6K,GAAA,EAAQK,KAAT,CAAc1J,MAAO,CAAE2J,WAAY,YAAnC,cAAoDpL,EAAQ3L,KAA5D,YAXM2L,EAAQlL,kBChExCuW,GAAqB,CACvBhR,OAAQ,mBAGNiR,GAAyB,CAC3BxJ,SAAU,WACVyJ,OAAQ,KACRC,KAAM,KACN9I,MAAO,OACP+I,OAAQ,OACR3I,MAAO,SAOIlC,gBAAS,YAAsD,IAAD,IAAnB5L,EAAmB,EAAnBA,SACtD,EAA+E0L,IAAvE1D,cAAiB5C,EAAzB,EAAyBA,iBAAkBrC,EAA3C,EAA2CA,QAASuC,EAApD,EAAoDA,qBACpD,OACI,eAAC0K,GAAA,EAAQC,MAAT,WACI,eAACD,GAAA,EAAD,CAASK,OAAK,EAACxC,SAAS,MAAMpB,MAAO,CAAEiK,QAAS,KAAhD,UACK1W,EAASuF,aACN,cAAC2K,GAAA,EAAD,CAAOzD,MAAO,CAAEK,SAAU,WAAY6J,OAAQ,IAAMH,MAAO,GAAII,IAAK,IAChEC,QAAM,EAAC/I,MAAM,MAAM/D,QAAQ,cAEnC,cAACgD,EAAA,EAAD,CAAOR,IAAG,iCAA4BvM,EAASgC,SAArC,QAAqDsM,OAAK,EAAC7B,MAAO4J,KAC5E,cAACrG,GAAA,EAAD,CAASvD,MAAO6J,GAAwBjG,OAAK,EAA7C,SACI,cAACpE,GAAA,EAAKgE,MAAN,UACI,cAAChE,GAAA,EAAD,UACI,eAACA,GAAA,EAAKmC,QAAN,WACI,cAACR,EAAA,EAAD,CACIH,KAAK,OACL1D,QAAS/J,EAAS+B,MAClB0K,MAAO,CAAEqB,MAAO,WAEpB,4BAAIpH,kBAAO1G,EAASkC,KAAO,iBAC3B,2CACc,iCACN,cAAC,IAAD,CAAMkK,GAAE,8BAAepM,EAASyE,YAAxB,aAAe,EAAe9D,UAAtC,mBACKX,EAASyE,YADd,aACK,EAAenC,+BAShD,cAAC0N,GAAA,EAAD,CAASQ,UAAQ,EAAC3C,SAAS,SAA3B,SACK7N,EAASuE,OACN,qCACI,cAACqI,EAAA,EAAD,CAAQkB,MAAM,SACV2C,QAAQ,QACRS,SAAUlR,EAASuF,YACnB2G,GAAImB,IACJjB,GAAE,kBAAapM,EAASF,IAJ5B,0BAOA,cAAC8M,EAAA,EAAD,CAAQ7J,QAASA,EACb0N,QAAQ,OACR3C,MAAO9N,EAASuF,YAAc,QAAU,MACxCgI,QAASjI,EAHb,SAIKtF,EAASuF,YAAc,aAAe,oBAI/CvF,EAASoE,QACT,cAACwI,EAAA,EAAD,CAAQ7J,QAASA,EAASwK,QAASnI,EAAnC,+BAIA,cAACwH,EAAA,EAAD,CAAQsE,SAAUlR,EAASuF,YACvBuI,MAAM,OAAO/K,QAASA,EACtBwK,QAASnI,EAFb,mCCtELwG,gBAAS,YAAoD,IAApB5L,EAAmB,EAAnBA,SACpD,OACI,eAACgQ,GAAA,EAAQC,MAAT,WACI,cAACD,GAAA,EAAD,CAASnC,SAAS,MAAlB,SACI,eAAC0D,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,OAAN,CAAa9D,MAAO,EAApB,SACI,cAACyB,GAAA,EAAD,CAAM1B,KAAK,QAAQK,MAAM,OAAOnB,KAAK,WAEzC,cAAC4E,EAAA,EAAKC,OAAN,CAAa9D,MAAO,GAApB,SACI,4BAAI1N,EAASiC,qBAIzB,cAAC+N,GAAA,EAAD,CAASnC,UAAQ,EAAjB,SACI,eAAC0D,EAAA,EAAD,CAAMuF,cAAc,SAApB,UACI,cAACvF,EAAA,EAAKC,OAAN,CAAa9D,MAAO,EAApB,SACI,cAACyB,GAAA,EAAD,CAAMxC,KAAK,WAAWc,KAAK,QAAQK,MAAM,WAE7C,cAACyD,EAAA,EAAKC,OAAN,CAAa9D,MAAO,GAApB,SACI,+BACKhH,kBAAO1G,EAASkC,KAAO,mCAKxC,cAAC8N,GAAA,EAAD,CAASnC,UAAQ,EAAjB,SACI,eAAC0D,EAAA,EAAD,CAAMuF,cAAc,SAApB,UACI,cAACvF,EAAA,EAAKC,OAAN,CAAa9D,MAAO,EAApB,SACI,cAACyB,GAAA,EAAD,CAAMxC,KAAK,SAASc,KAAK,QAAQK,MAAM,WAE3C,cAACyD,EAAA,EAAKC,OAAN,CAAa9D,MAAO,GAApB,SACI,iCAAO1N,EAASoC,MAAhB,KAAyBpC,EAASmC,qBC9B3CyJ,gBAAS,YAA0E,IAAD,IAAtC5L,SAAWqE,EAA2B,EAA3BA,UAAWI,EAAgB,EAAhBA,KAC7E,OAAKJ,EAED,qCACI,eAAC2L,GAAA,EAAD,CACIG,UAAU,SACV1D,MAAO,CAAEiJ,OAAQ,QACjB7H,SAAS,MACT0C,WAAS,EACTzE,UAAQ,EACRgC,MAAM,OANV,UAQKzJ,EAAU2K,OARf,IAQ6C,IAArB3K,EAAU2K,OAAe,UAAY,UAR7D,YAUA,cAACgB,GAAA,EAAD,CAASnC,UAAQ,EAAjB,SACI,cAAC0B,GAAA,EAAD,CAAMwH,SAAO,EAACC,SAAO,EAArB,SACK3S,EAAUoL,KAAI,SAAAzK,GAAQ,OACnB,eAACiH,GAAA,EAAD,CAA8BQ,MAAO,CAAEK,SAAU,YAAjD,UACK9H,EAASrE,YAAT,OAAsB8D,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAM9D,WAC7B,cAACuP,GAAA,EAAD,CACIzD,MAAO,CAAEK,SAAU,YACnBgB,MAAM,SACN+I,OAAO,QAHX,kBAOA,cAAC9J,EAAA,EAAD,CAAOU,KAAK,OAAOlB,IAAKvH,EAASzC,OAAU,qBAC3C,eAAC0J,GAAA,EAAKmC,QAAN,CAAc0I,cAAc,SAA5B,UACI,cAAC7K,GAAA,EAAK2B,OAAN,CAAa1B,GAAG,KAAhB,SACI,cAAC,IAAD,CAAME,GAAE,oBAAepH,EAASrE,UAAhC,SAA6CqE,EAAS1C,gBAEzD0C,EAASU,WACV,cAACuG,GAAA,EAAKgL,MAAN,CAAYxK,MAAO,CAAEqB,MAAO,UAA5B,4BAfG9I,EAASrE,oBAhBjB,QCCZiL,gBAAU,WACrB,IAAO5D,EAAiB0D,IAAjB1D,cACkBhI,EAAiEgI,EAAnFnF,iBAA4BmB,EAAuDgE,EAAvDhE,aAAchB,EAAyCgF,EAAzChF,eAAgBwC,EAAyBwC,EAAzBxC,sBAC1D1F,EAAMkV,eAANlV,GAOP,OALAwR,qBAAU,WAEN,OADIxR,GAAIkE,EAAalE,GACd,kBAAM0F,OACd,CAAC1F,EAAIkE,EAAcwB,IAElBxC,IAAmBhD,EAAiB,cAACgU,GAAD,IAGpC,eAACzC,EAAA,EAAD,WACI,eAACA,EAAA,EAAKC,OAAN,CAAa9D,MAAO,GAApB,UACI,cAAC,GAAD,CAAwB1N,SAAUA,IAClC,cAAC,GAAD,CAAsBA,SAAUA,IAChC,cAAC,GAAD,CAAsBqK,WAAYrK,EAASF,QAE/C,cAACyR,EAAA,EAAKC,OAAN,CAAa9D,MAAO,EAApB,SACI,cAAC,GAAD,CAAyB1N,SAAUA,YC5BpC,SAASkX,KACpB,IACA,EAA4B/F,mBAAS,MAArC,mBAAO7S,EAAP,KAAeuU,EAAf,KAyBA,OACI,qCACI,cAACjF,EAAA,EAAD,CAAQ1B,GAAG,KAAKnC,QAAQ,yBACxB,cAACiG,GAAA,EAAD,UACI,eAACpD,EAAA,EAAOqD,MAAR,CAAckH,OAAO,IAArB,UACI,cAACvK,EAAA,EAAD,CAAQW,QA7BxB,WACItQ,IAAMkC,IAAIiY,uBAA6B9N,OAAM,SAAAiK,GAAG,OAAIzP,QAAQC,IAAIwP,EAAIzV,cA4BvBiM,QAAQ,YAAYsG,OAAK,EAACgH,SAAO,IAClE,cAACzK,EAAA,EAAD,CAAQW,QA1BxB,WACItQ,IAAMkC,IAAIiY,yBAA+B9N,OAAM,SAAAiK,GAAG,OAAIzP,QAAQC,IAAIwP,EAAIzV,cAyBvBiM,QAAQ,cAAcsG,OAAK,EAACgH,SAAO,IACtE,cAACzK,EAAA,EAAD,CAAQW,QAXxB,WACItQ,IAAMqC,KAAK8X,iBAAwB,IAAI9N,OAAM,SAAAiK,GAAG,OAAIV,EAAUU,OAUVxJ,QAAQ,mBAAmBsG,OAAK,EAACgH,SAAO,IAChF,cAACzK,EAAA,EAAD,CAAQW,QAxBxB,WACItQ,IAAMkC,IAAIiY,0BAAgC9N,OAAM,SAAAiK,GAAG,OAAIzP,QAAQC,IAAIwP,EAAIzV,cAuBvBiM,QAAQ,eAAesG,OAAK,EAACgH,SAAO,IACxE,cAACzK,EAAA,EAAD,CAAQW,QArBxB,WACItQ,IAAMkC,IAAIiY,0BAAgC9N,OAAM,SAAAiK,GAAG,OAAIzP,QAAQC,IAAIwP,EAAIzV,cAoBtBiM,QAAQ,eAAesG,OAAK,EAACgH,SAAO,IACzE,cAACzK,EAAA,EAAD,CAAQW,QAlBxB,WACItQ,IAAMkC,IAAIiY,2BAAiC9N,OAAM,SAAAiK,GAAG,OAAIzP,QAAQC,IAAIwP,OAiBxBxJ,QAAQ,WAAWsG,OAAK,EAACgH,SAAO,SAGvE/Y,GACG,cAAC+U,GAAD,CAAkB/U,OAAQA,OC1C3B,SAASgZ,KACpB,OACI,eAACtH,GAAA,EAAD,CAASkD,aAAW,EAApB,UACI,eAACtF,EAAA,EAAD,CAAQN,MAAI,EAAZ,UACI,cAAC6B,GAAA,EAAD,CAAMxC,KAAK,WADf,2DAIA,cAACqD,GAAA,EAAQuH,OAAT,UACI,cAAC3K,EAAA,EAAD,CAAQV,GAAImB,IAAMjB,GAAG,cAAciL,SAAO,EAA1C,qCCPDzL,oBAAS,WAAwB,IAAD,IACpCjO,EAAe+N,IAAf/N,YACP,OACI,eAACqO,EAAA,EAAD,WACI,cAAC4B,EAAA,EAAD,CAAQ1B,GAAG,KAAKnC,QAAQ,iBACxB,cAAC6D,EAAA,EAAD,CAAQgD,KAAG,EAAC1E,GAAG,KAAK4B,MAAM,MAAM/D,QAAO,UAAEpM,EAAYO,aAAd,aAAE,EAAmBsZ,WAC3D,UAAA7Z,EAAYO,aAAZ,eAAmB2B,UAChB,eAACmQ,GAAA,EAAD,WACI,cAACpC,EAAA,EAAD,CAAQ1B,GAAG,KAAKnC,QAAQ,cAAc+D,MAAM,SAC5C,sBAAMrB,MAAO,CAACkB,UAAW,QAAzB,SAAqChQ,EAAYO,MAAM2B,mB,UCR5D+L,gBAAS,WACpB,IAAOnD,EAAciD,IAAdjD,WAEP,OACI,cAACgP,GAAA,EAAD,CACA5N,KAAMpB,EAAWmB,MAAMC,KACvB6N,QAASjP,EAAWC,WACpB+E,KAAK,OAHL,SAKI,cAACgK,GAAA,EAAMrJ,QAAP,UACK3F,EAAWmB,MAAMvK,Y,yCCRnB,SAASsY,GAAT,GAAiD,IAAnBC,EAAkB,EAAlBA,SACnCC,EAAW,CACbnC,OAAQ,kBACRrG,YAAa,OACbyI,aAAc,MACdC,WAAY,OACZ5H,UAAW,SACXsG,OAAQ,KAORuB,EAASC,uBAAY,SAAAC,GACzBN,EAASM,EAAczI,KAAI,SAAC5O,GAAD,OAAec,OAAOC,OAAOf,EAAM,CAC1DsX,QAASC,IAAIC,gBAAgBxX,WAEhC,CAAC+W,IACJ,EAAoDU,aAAY,CAACN,WAA1DO,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,cAAeC,EAApC,EAAoCA,aAEpC,OACE,gDAASF,KAAT,IAAyB9L,MAAOgM,EAAY,2BAAOZ,GAZlC,CACbxI,YAAa,UAW2DwI,EAA5E,UACE,qCAAWW,MACX,cAACrJ,GAAA,EAAD,CAAMxC,KAAK,SAASc,KAAK,SACzB,cAACG,EAAA,EAAD,CAAQ7D,QAAQ,wB,qBCxBP,SAAS2O,GAAT,GAAgE,IAAnCC,EAAkC,EAAlCA,aAAcC,EAAoB,EAApBA,WACtD,OACI,cAAC,KAAD,CACErM,IAAKoM,EACLlM,MAAO,CAACgK,OAAQ,IAAK/I,MAAO,QAC5BmL,mBAAoB,EACpBC,YAAa,EACbX,QAAQ,eACRY,QAAQ,EACRC,SAAU,EACVC,aAAc,EACdC,YAAY,EACZC,cAAe,SAAAC,GAAO,OAAIR,EAAWQ,MCThCxN,oBAAS,YAA2D,IAA/BhL,EAA8B,EAA9BA,YAAamC,EAAiB,EAAjBA,QAC7D,EAA0BoO,mBAAc,IAAxC,mBAAOkI,EAAP,KAAczB,EAAd,KACA,EAA8BzG,qBAA9B,mBAAOiI,EAAP,KAAgBR,EAAhB,KAeA,OAPAtH,qBAAU,WACN,OAAO,WAEH+H,EAAM9V,SAAQ,SAAC1C,GAAD,OAAeuX,IAAIkB,gBAAgBzY,EAAKsX,eAE3D,CAACkB,IAGA,eAAC,KAAD,WACI,eAAC,KAAK7H,OAAN,CAAa9D,MAAO,EAApB,UACI,cAACE,EAAA,EAAD,CAAQgD,KAAG,EAAC9C,MAAM,OAAO/D,QAAQ,uBACjC,cAAC4N,GAAD,CAAqBC,SAAUA,OAEnC,cAAC,KAAKpG,OAAN,CAAa9D,MAAO,IACpB,eAAC,KAAK8D,OAAN,CAAa9D,MAAO,EAApB,UACI,cAACE,EAAA,EAAD,CAAQgD,KAAG,EAAC9C,MAAM,OAAO/D,QAAQ,0BAChCsP,GAASA,EAAMrK,OAAS,GACrB,cAAC0J,GAAD,CAAoBE,WAAYA,EAAYD,aAAcU,EAAM,GAAGlB,aAG3E,cAAC,KAAK3G,OAAN,CAAa9D,MAAO,IACpB,eAAC,KAAK8D,OAAN,CAAa9D,MAAO,EAApB,UACI,cAACE,EAAA,EAAD,CAAQgD,KAAG,EAAC9C,MAAM,OAAO/D,QAAQ,8BAChCsP,GAASA,EAAMrK,OAAS,GACzB,qCACI,qBAAKgE,UAAU,cAAcvG,MAAO,CAAEsE,UAAW,IAAKjC,SAAU,YAChE,eAAClC,EAAA,EAAOqD,MAAR,CAAckH,OAAQ,EAAtB,UACI,cAACvK,EAAA,EAAD,CAAQ7J,QAASA,EAASwK,QAjC9C,WACQ6L,GACAA,EAAQG,mBAAmBC,QAAO,SAAAC,GAAI,OAAI7Y,EAAY6Y,OA+BC5M,UAAQ,EAACS,KAAK,UACzD,cAACV,EAAA,EAAD,CAAQsE,SAAUnO,EAASwK,QAAS,kBAAMqK,EAAS,KAAKtK,KAAK,yBCvCtE1B,gBAAS,YAA4C,IAAD,EAAlBxK,EAAkB,EAAlBA,QAC7C,EAC6DsK,IADrD1B,aAAgB0P,EAAxB,EAAwBA,cAAe9Y,EAAvC,EAAuCA,YACnCoG,EADJ,EACIA,UAAWC,EADf,EACeA,aAAchG,EAD7B,EAC6BA,aAAcC,EAD3C,EAC2CA,YAC3C,EAAwCiQ,oBAAS,GAAjD,mBAAOwI,EAAP,KAAqBC,EAArB,KACA,EAA4BzI,mBAAS,IAArC,mBAAO0I,EAAP,KAAeC,EAAf,KAgBA,OACI,cAACC,GAAA,EAAIC,KAAL,UACI,eAACzI,EAAA,EAAD,WACI,eAACA,EAAA,EAAKC,OAAN,CAAa9D,MAAO,GAApB,UACI,cAACE,EAAA,EAAD,CAAQ6C,QAAQ,OAAOnD,KAAK,QAAQvD,QAAQ,WAC3C2P,GACG,cAAC9M,EAAA,EAAD,CAAQ6D,QAAQ,QAAQJ,OAAK,EACzBtG,QAAS4P,EAAe,SAAW,YACnCpM,QAAS,kBAAMqM,GAAiBD,SAI5C,cAACpI,EAAA,EAAKC,OAAN,CAAa9D,MAAO,GAApB,SACKiM,EACG,cAAC,GAAD,CAAmB/Y,YA5BvC,SAA2BC,GACvBD,EAAYC,GAAMzB,MAAK,kBAAMwa,GAAgB,OA2BsB7W,QAASiE,IAGxD,cAAC4H,GAAA,EAAKqB,MAAN,CAAYgK,YAAa,EAAzB,mBACK7Y,EAAQsG,cADb,aACK,EAAgB+H,KAAI,SAAAhI,GAAK,OACtB,eAACmH,GAAA,EAAD,WACI,cAAC7B,EAAA,EAAD,CAAOR,IAAK9E,EAAMvI,MACjBwa,GACG,eAAC9M,EAAA,EAAOqD,MAAR,CAAc3B,OAAK,EAAC6I,OAAQ,EAA5B,UACI,cAACvK,EAAA,EAAD,CACIyD,OAAK,EACLvC,MAAM,QACN/D,QAAQ,OACR4C,KAAO,OAASlF,EAAM3H,GACtBoR,SAAUzJ,EAAME,OAChB5E,QAAS8W,IAAY,OAASpS,EAAM3H,IAAMmH,EAC1CsG,QAAS,SAAAiB,GAAC,OAxC1D,SAA4B/G,EAAc+G,GACtCsL,EAAUtL,EAAE0L,cAAcvN,MAC1B1L,EAAawG,GAsC6C0S,CAAmB1S,EAAO+G,MAE5C,cAAC5B,EAAA,EAAD,CACIyD,OAAK,EACLvC,MAAM,MACNR,KAAK,QACLX,KAAMlF,EAAM3H,GACZoR,SAAUzJ,EAAME,OAChB5E,QAAS8W,IAAWpS,EAAM3H,IAAMmH,EAChCsG,QAAS,SAAAiB,GAAC,OA5C1D,SAA2B/G,EAAc+G,GACrCsL,EAAUtL,EAAE0L,cAAcvN,MAC1BzL,EAAYuG,GA0C8C2S,CAAkB3S,EAAO+G,WApB5C/G,EAAM3H,mBCnCtC8L,gBAAS,YAAsD,IAA5BxK,EAA2B,EAA3BA,QACrB0G,GADgD,EAAlBhF,SACV4I,IAArC1B,aAAiBlC,eACzB,EAA0CqJ,mBAA4B,IAAI3O,EAAkBpB,IAA5F,mBAAOiZ,EAAP,KAAsBC,EAAtB,KAGM7G,EAAmBC,KAAW,CAChCpR,YAAaoR,OAAaC,SAAS,kCAcvC,OAXArC,qBAAU,WACFlQ,GACAkZ,EAAiB,IAAI9X,EAAkBpB,MAE5C,CAACA,IAQA,cAACmQ,EAAA,EAAD,UACI,cAACA,EAAA,EAAKC,OAAN,CAAa9D,MAAO,GAApB,SACI,cAAC,KAAD,CAAQwH,oBAAkB,EACtBzC,cAAe4H,EACf5G,iBAAkBA,EAClBb,SAAU,SAAA1M,GAAM,OAXhC,SAA0BA,GACtB4B,EAAc5B,IACH,EASqBkP,CAAiBlP,IAHzC,SAKK,gBAAG4M,EAAH,EAAGA,aAAcc,EAAjB,EAAiBA,QAASb,EAA1B,EAA0BA,aAAcc,EAAxC,EAAwCA,MAAxC,OACD,eAACxB,GAAA,EAAD,CAAMW,UAAU,UAAUJ,SAAUE,EAAcG,aAAa,MAA/D,UACI,cAACjB,GAAD,CAAarF,KAAK,cAAcuG,YAAY,iBAC5C,cAACgB,GAAD,CAAYhB,YAAY,MAAMvG,KAAK,MAAM0I,KAAM,IAC/C,cAACzI,EAAA,EAAD,CACI7J,QAASgQ,EACTtC,QAAQ,QACR5D,UAAQ,EACRsG,KAAK,SACLjC,SAAU6B,IAAiBc,IAAUD,EACrC7J,QAAQ,wBC1CrB6B,gBAAS,YAA2C,IAAnBxK,EAAkB,EAAlBA,QAChBsY,EAAoBhO,IAApC1B,aAAgB0P,cACxB,EAAgCvI,oBAAS,GAAzC,mBAAOrO,EAAP,KAAiByX,EAAjB,KAEA,OACQ,eAACR,GAAA,EAAIC,KAAL,WACSN,GACO,cAAC9M,EAAA,EAAD,CACQyD,OAAK,EACLtG,QAASjH,EAAW,SAAW,eAC/B2N,QAAQ,QACRlD,QAAS,kBAAMgN,GAAazX,OAE1CA,GACM,qCACQ,cAAC8K,EAAA,EAAD,CAAQ1B,GAAG,KAAKnC,QAAS,SAAW3I,EAAQkB,cAC5C,mBAAGmK,MAAO,CAAE2J,WAAY,YAAxB,SACEhV,EAAQqB,SAGzBK,GACO,cAAC,GAAD,CAAiB1B,QAASA,EAAS0B,SAAUA,UCxB9D8I,gBAAS,WACpB,IAAQ5B,EAAiB0B,IAAjB1B,aACA5I,EAAsD4I,EAAtD5I,QAAS8F,EAA6C8C,EAA7C9C,WAAYC,EAAiC6C,EAAjC7C,kBAAmBC,EAAc4C,EAAd5C,UAGhD,OACI,cAAC2S,GAAA,EAAIC,KAAL,CAAUjX,QAASoE,EAAnB,SACI,eAACoK,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,OAAN,CAAa9D,MAAO,GAApB,SACI,cAACE,EAAA,EAAD,CACI6C,QAAQ,OACRnD,KAAK,OACLvD,QAAuB,IAAd3C,EAAA,kCAAuChG,QAAvC,IAAuCA,OAAvC,EAAuCA,EAASkB,aAAhD,wBAA0ElB,QAA1E,IAA0EA,OAA1E,EAA0EA,EAASkB,YAAnF,qBAGjB,cAACiP,EAAA,EAAKC,OAAN,CAAa9D,MAAO,GAApB,SACI,cAACkB,GAAA,EAAKqB,MAAN,CAAYgK,YAAa,EAAzB,SACK/S,EAAWuI,KAAI,SAAArO,GAAO,OACnB,cAAC,GAAD,CAAoCA,QAASA,GAA3BA,EAAQT,yBClBvCiL,gBAAS,WACpB,MAA4FF,IAApF1B,aAAgB7B,EAAxB,EAAwBA,kBAAmBd,EAA3C,EAA2CA,eAAgBC,EAA3D,EAA2DA,kBAAmBlG,EAA9E,EAA8EA,QAExEoZ,EAAQ,CACV,CAAEC,SAAU,gBAAiBC,KAAM,CAAE/b,IAAK,WAC1C,CAAE8b,SAAU,cAAeC,KAAM,CAAE/b,IAAK,SACxC,CAAE8b,SAAU,UAAWC,KAAM,CAAE/b,IAAK,aAGxC2S,qBAAU,WACNnJ,EAAkB/G,EAAST,YAC5B,CAACwH,EAAmB/G,IAMvB,OACI,cAAC2Y,GAAA,EAAIC,KAAL,CAAUjX,QAASuE,EAAnB,SACI,eAACiK,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,OAAN,CAAa9D,MAAO,GAApB,SACI,cAACE,EAAA,EAAD,CAAQ6C,QAAQ,OAAOnD,KAAK,WAAWvD,QAAS,iBAEpD,eAACwH,EAAA,EAAKC,OAAN,CAAa9D,MAAO,GAApB,UACI,cAACqM,GAAA,EAAD,CACIY,KAAM,CAAEpK,WAAW,EAAMpD,UAAU,GACnCqN,MAAOA,EACPI,YAAa,SAACpM,EAAG7R,GAAJ,OAfT,SAAC6R,EAAmB7R,GACxCwL,EAAkB/G,EAAST,SAAU6Z,EAAM7d,EAAKke,aACpCH,KAAK/b,KAayBmc,CAAgBtM,EAAG7R,MAEjD,uBACA,cAACiS,GAAA,EAAKqB,MAAN,CAAYgK,YAAa,EAAzB,SACK5S,EAAeoI,KAAI,SAACzP,GAAD,OAChB,eAAC4O,GAAA,EAAD,CACI1C,GAAImB,IACJjB,GAAE,sBAAiBpM,EAASqK,YAFhC,UAKI,cAAC0C,EAAA,EAAD,CACIR,IAAG,iCAA4BvM,EAASgC,SAArC,QAEHyK,MAAO,CACHsE,UAAW,IAAKgK,UACZ,WAGZ,eAACnM,GAAA,EAAKR,QAAN,WACI,cAACQ,GAAA,EAAKhB,OAAN,CACIuC,UAAU,SADd,SACwBnQ,EAAS+B,QACjC,eAAC6M,GAAA,EAAKoM,KAAN,CAAW7K,UAAU,SAArB,UACI,8BAAMzJ,kBAAO,IAAI9B,KAAK5E,EAASkC,MAC3B,YACJ,8BAAMwE,kBAAO,IAAI9B,KAAK5E,EAASkC,MAC3B,oBAjBPlC,EAASqK,4BC7B/BuB,gBAAU,YAA2C,IAAlBxK,EAAiB,EAAjBA,QACvC4I,EAAgB0B,IAAhB1B,aAEDwQ,EAAQ,CACV,CAACC,SAAU,QAASrH,OAAQ,kBAAM,cAAC,GAAD,CAAchS,QAASA,MACzD,CAACqZ,SAAU,SAAUrH,OAAQ,kBAAM,cAAE,GAAF,CAAgBhS,QAASA,MAC5D,CAACqZ,SAAU,SAAUrH,OAAQ,kBAAM,cAAC6H,GAAD,MACnC,CAACR,SAAU,YAAarH,OAAQ,kBAAM,cAAC,GAAD,MACtC,CAACqH,SAAU,YAAarH,OAAQ,kBAAM,cAAC,GAAD,OAE1C,OACI,cAAC2G,GAAA,EAAD,CACIY,KAAM,CAACrM,OAAO,EAAMd,UAAU,GAC9B0N,aAAa,QACbV,MAAOA,EACPI,YAAa,SAACpM,EAAG7R,GAAJ,OAAaqN,EAAazC,aAAa5K,EAAKke,mB,UCnBtDjP,gBAAS,YAA0C,IAAlBxK,EAAiB,EAAjBA,QAC5C,OACI,cAAC4O,GAAA,EAAD,UACI,eAACuB,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,OAAN,CAAa9D,MAAO,GAApB,SACI,cAACzB,GAAA,EAAKgE,MAAN,UACI,eAAChE,GAAA,EAAD,WACI,cAACA,GAAA,EAAKc,MAAN,CAAYC,QAAM,EAACS,KAAK,QAAQlB,IAAMnL,EAAQmB,OAAS,qBACvD,cAAC0J,GAAA,EAAKmC,QAAN,CAAc0I,cAAc,SAA5B,SACI,cAAClJ,EAAA,EAAD,CAAQ1B,GAAG,KAAKnC,QAAS3I,EAAQkB,uBAKjD,eAACiP,EAAA,EAAKC,OAAN,CAAa9D,MAAO,EAApB,UACI,eAACyN,GAAA,EAAUlL,MAAX,CAAiBkH,OAAQ,EAAzB,UACI,cAACgE,GAAA,EAAD,CAAW3I,MAAM,YAAYnP,MAAOjC,EAAQuE,iBAC5C,cAACwV,GAAA,EAAD,CAAW3I,MAAM,YAAYnP,MAAOjC,EAAQ6G,oBAEhD,cAAC8L,GAAA,EAAD,IACA,cAAC,GAAD,CAAc3S,QAASA,eCpB5BwK,gBAAS,WACpB,IAAQjL,EAAaqU,eAAbrU,SACAqJ,EAAiB0B,IAAjB1B,aACAjD,EAAuDiD,EAAvDjD,eAAgBS,EAAuCwC,EAAvCxC,YAAapG,EAA0B4I,EAA1B5I,QAASmG,EAAiByC,EAAjBzC,aAS9C,OAPA+J,qBAAU,WAEN,OADA9J,EAAY7G,GACL,WACH4G,EAAa,MAElB,CAACC,EAAa7G,EAAU4G,IAEvBR,EAAuB,cAACiN,GAAD,CAAkBjK,QAAQ,uBAGjD,cAACwH,EAAA,EAAD,UACI,cAACA,EAAA,EAAKC,OAAN,CAAa9D,MAAO,GAApB,SACKtM,GACG,qCACI,cAAC,GAAD,CAAeA,QAASA,IACxB,cAAC,GAAD,CAAgBA,QAASA,c,2BCvBlC,SAASga,GAAT,GAA+D,IAA7BC,EAA4B,EAAvCC,UAAyBC,EAAc,mBACtDzH,EAAepI,IAA3BvH,UAAY2P,WACnB,OACI,cAAC,KAAD,2BACQyH,GADR,IAEInI,OAAQ,SAACnB,GAAD,OAAW6B,EAAa,cAACuH,EAAD,eAAepJ,IAAY,cAAC,KAAD,CAAU7F,GAAG,UCoDrER,oBA7Cf,WACE,IAAM4P,EAAWC,eACjB,EAAiC/P,IAA1B/N,EAAP,EAAOA,YAAawG,EAApB,EAAoBA,UAYpB,OAVAmN,qBAAU,WACJ3T,EAAYF,MACd0G,EAAU4E,UAAU2S,SAAQ,kBAAM/d,EAAY+L,kBAE9CvF,EAAU6E,yBAAyB5J,MAAK,WACtCzB,EAAY+L,oBAGf,CAAC/L,EAAawG,IAEZxG,EAAY8L,UAGf,qCACE,cAAC,IAAD,CAAgBqD,SAAS,eAAe6O,iBAAe,IACvD,cAAC,GAAD,IACA,cAAC,KAAD,CAAOtP,OAAK,EAACuP,KAAK,IAAIN,UAAWO,KACjC,cAAC,KAAD,CACED,KAAM,QACNxI,OAAQ,kBACN,qCACE,cAAC,EAAD,IACA,cAACpH,EAAA,EAAD,CAAWS,MAAO,CAAEkB,UAAW,OAA/B,SACE,eAAC,KAAD,WACE,cAACyN,GAAD,CAAcQ,KAAK,cAAcvP,OAAK,EAACiP,UAAWQ,KAClD,cAACV,GAAD,CAAcQ,KAAK,kBAAkBN,UAAWS,KAChD,cAACX,GAAD,CAAcQ,KAAM,CAAC,kBAAmB,eAAmCN,UAAWU,IAAzBR,EAAS7c,KACtE,cAACyc,GAAD,CAAcQ,KAAK,sBAAsBN,UAAWW,KACpD,cAACb,GAAD,CAAcQ,KAAK,UAAUN,UAAWpE,KACxC,cAAC,KAAD,CAAO0E,KAAK,gBAAgBN,UAAWY,KACvC,cAAC,KAAD,CAAOZ,UAAWhE,mBApBG,cAACtD,GAAD,CAAkBjK,QAAQ,sBCnBhDoS,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBjd,MAAK,YAAkD,IAA/Ckd,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,SCLC,SAASO,KACpB,IAAOC,EAAYnB,eAAZmB,SAKP,OAHAtL,qBAAU,WACN1I,OAAOiU,SAAS,EAAG,KACpB,CAACD,IACG,KCIJ,IAAMpe,GAAUse,eAEvBC,IAAS3J,OACP,cAAC5H,EAAawR,SAAd,CAAuB3Z,MAAO3F,EAA9B,SACE,eAAC,KAAD,CAAQc,QAASA,GAAjB,UACE,cAACme,GAAD,IACA,cAAC,GAAD,SAIJM,SAASC,eAAe,SAM1Bf,O","file":"static/js/main.60fd1e3d.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2){\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { history } from \"../..\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { PaginatedResult } from \"../models/pagination\";\r\nimport { Profile, ProfileFormValues, UserActivity } from \"../models/profile\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"../stores/store\";\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay)\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers.Authorization = `Bearer ${token}`\r\n    return config;\r\n})\r\n\r\n\r\naxios.interceptors.response.use(async response => {\r\n    if (process.env.NODE_ENV === 'development') await sleep(1000);\r\n    \r\n    const pagination = response.headers['pagination'];\r\n    if (pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>\r\n    }\r\n    return response;\r\n}, (error: AxiosError) => {\r\n    const {data, status, config} = error.response!;\r\n    switch (status) {\r\n        case 400: \r\n            if (typeof data === 'string') {\r\n                toast.error(data);\r\n            }\r\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('/not-found');\r\n            }\r\n            if (data.errors) {\r\n                const modalStateErrors = [];\r\n                for (const key in data.errors){\r\n                    if (data.errors[key]) {\r\n                        modalStateErrors.push(data.errors[key])\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            } else {\r\n                toast.error(data);\r\n            }\r\n            break;\r\n        case 401:\r\n            toast.error('Unauthorized!');\r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n})\r\n\r\nconst responseBody = <T> (response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T> (url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    del: <T> (url: string) => axios.delete<T>(url).then(responseBody),\r\n}\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params}).then(responseBody), \r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\r\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {}),\r\n}\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>('/account'),\r\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user),\r\n    fbLogin: (accessToken: string) => requests.post<User>(`/account/fbLogin?accessToken=${accessToken}`, {})\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post('photos', formData, {\r\n            headers: {'Content-type': 'multipart/form-data'}\r\n        })\r\n    }, \r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}), \r\n    deletePhoto: (id: string) => requests.del(`photos/${id}`),\r\n    editProfile: (profile: ProfileFormValues) => requests.put<void>(`/profiles/`, profile),\r\n    updateFollowing: (username: string) => requests.post<void>(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate: string) => \r\n        requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    getUserActivity: (username: string, predicate: string) => \r\n    requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n}\r\n\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account, \r\n    Profiles\r\n}\r\n\r\nexport default agent;","import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername: string;\r\n    isCancelled: boolean;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    host?: Profile;\r\n    attendees: Profile[]\r\n  }\r\n\r\n  export class Activity implements Activity {\r\n    constructor(init?: ActivityFormValues) {\r\n      Object.assign(this, init);\r\n    }\r\n  }\r\n\r\n  export class ActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(activity?: ActivityFormValues) {\r\n      if (activity) {\r\n        this.id = activity.id;\r\n        this.title = activity.title;\r\n        this.category = activity.category;\r\n        this.description = activity.description;\r\n        this.date = activity.date;\r\n        this.venue = activity.venue;\r\n        this.city = activity.city;\r\n      }\r\n    }\r\n  }","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    photos?: Photo[];\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n}\r\n\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User){\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}\r\n\r\nexport class ProfileFormValues {\r\n    displayName: string = '';\r\n    bio: string = '';\r\n    constructor(profile : Profile) {\r\n        if (profile) {\r\n            this.bio = profile.bio!;\r\n            this.displayName = profile.displayName;\r\n        }\r\n    }\r\n}\r\n\r\nexport interface UserActivity {\r\n    activityId: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}","import { format } from \"date-fns\";\r\nimport { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ActivityStore {\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = true;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.predicate.keys(), \r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort((a, b) =>\r\n            a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    get groupedActivities() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date = format(activity.date!, 'd MMMM yyyy');\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            }, {} as { [key: string]: Activity[] })\r\n        )\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n        switch (predicate) {\r\n            case 'all': \r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n            this.predicate.delete('startDate');\r\n            this.predicate.set('startDate', value);\r\n            break;\r\n        }\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString())\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        })\r\n        return params;\r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n        \r\n            result.data.forEach(activity => {\r\n                this.setActivity(activity);\r\n            });\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false);\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if (activity) {\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        }\r\n        else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                })\r\n\r\n                this.setLoadingInitial(false);\r\n                return activity;\r\n\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n        if (user) {\r\n            activity.isGoing = activity.attendees!.some(\r\n                a => a.username === user.username\r\n            )\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\r\n        }\r\n        activity.date = new Date(activity.date!)\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUsername = user!.username;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            })\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                if (activity.id) {\r\n                    let updatedActivity = { ...this.getActivity(activity.id), ...activity }\r\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if (this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees =\r\n                        this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\r\n                this.loading = false;\r\n            })\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    cancelActivityToggle = async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false)\r\n        }\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activityRegistry.forEach(activity => {\r\n            activity.attendees.forEach(attendee => {\r\n                if (attendee.username === username) {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile, ProfileFormValues, UserActivity } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile = false; \r\n    uploading = false;\r\n    loading = false;\r\n    loadingPhoto = false;\r\n    followings: Profile[] = [];\r\n    loadingFollowings = false;\r\n    activeTab = 0;\r\n    userActivities : UserActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.activeTab, \r\n            activeTab => {\r\n                if (activeTab === 3 || activeTab === 4) {\r\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\r\n                    this.loadFollowings(predicate);\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true; \r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingProfile = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n                    if (photo.isMain  && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n                this.uploading = false;\r\n            })\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.uploading = false)\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loadingPhoto = true; \r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if ( this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                }\r\n                this.loadingPhoto = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingPhoto = false)\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo:Photo) => {\r\n        this.loadingPhoto = true;\r\n        try {\r\n           await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                if ( this.profile && this.profile.photos) {\r\n                    this.profile.photos = this.profile.photos.filter(p => p.id !== photo.id);\r\n                }\r\n                \r\n                this.loadingPhoto = false;\r\n            })\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingPhoto = false)\r\n        }\r\n    }\r\n\r\n    updateProfile = async (profile: ProfileFormValues) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            await agent.Profiles.editProfile(profile);\r\n            runInAction(() => {\r\n                store.userStore.setDisplayName(profile.displayName);\r\n                if (this.profile) {\r\n                    this.profile.bio = profile.bio;\r\n                    this.profile.displayName = profile.displayName;\r\n                }\r\n                this.loadingProfile = false;\r\n            })\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingProfile = false)\r\n        }\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n                }\r\n                this.followings.forEach(profile => {\r\n                    if (profile.username === username) {\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false)\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n        \r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingFollowings = false)\r\n        }\r\n    }\r\n\r\n    loadUserActivites = async (username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n            const userActivities = await agent.Profiles.getUserActivity(username, predicate!);\r\n            runInAction(() => {\r\n                this.userActivities = userActivities;\r\n                this.loadingActivities = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingActivities = false)\r\n        }\r\n    }\r\n\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n    fbAccessToken: string | null = null;\r\n    fbLoading = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n            \r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n            \r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            runInAction(() => {\r\n                this.user = user;\r\n            })\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n        if (this.user){\r\n            this.user.image = image;\r\n        } \r\n    }\r\n\r\n    setDisplayName = (displayName: string) => {\r\n        if (this.user) {\r\n            this.user.displayName = displayName;\r\n        }\r\n    }\r\n\r\n    getFacebookLoginStatus = async () => {\r\n        window.FB.getLoginStatus(response => {\r\n            if (response.status === 'connected') {\r\n                this.fbAccessToken = response.authResponse.accessToken;\r\n            }\r\n        })\r\n    }\r\n\r\n    facebookLogin = () => {\r\n        this.fbLoading = true;\r\n        const apiLogin = (accessToken: string) => {\r\n            agent.Account.fbLogin(accessToken).then(user => {\r\n                store.commonStore.setToken(user.token);\r\n                runInAction(() => {\r\n                    this.user = user;\r\n                    this.fbLoading = false;\r\n                })\r\n                history.push('/activities');\r\n            }).catch(error => {\r\n                console.log(error);\r\n                runInAction(() => this.fbLoading = false)\r\n            })\r\n        }\r\n\r\n        if (this.fbAccessToken) {\r\n            apiLogin(this.fbAccessToken);\r\n        } else {\r\n            window.FB.login(response => {\r\n                apiLogin(response.authResponse.accessToken);\r\n            }, {scope: 'public_profile,email'})\r\n        }\r\n    }\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore : new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore(),\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if (token) {\r\n                    window.localStorage.setItem('jwt', token)\r\n                } else {\r\n                    window.localStorage.removeItem('jwt')\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal : Modal = {\r\n        open: false, \r\n        body: null\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this.modal);\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true; \r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false; \r\n        this.modal.body = null;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_CHAT_URL +  '?activityId=' + activityId, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            this.hubConnection.start().catch(error => console.log('Error establishing the connection: ' + error));\r\n\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => {\r\n                        comment.createdAt = new Date(comment.createdAt +'Z');\r\n                    })\r\n                    this.comments = comments;\r\n                });\r\n            })\r\n\r\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment);\r\n                });\r\n            })\r\n        }\r\n    }\r\n\r\n    stopHubConnectio = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stoping the connection: ' + error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnectio();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport { Button, Container, Menu, Image, Dropdown } from \"semantic-ui-react\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\n\r\nexport default observer(function NavBar() {\r\n    const { userStore: { user, logout } } = useStore();\r\n\r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} to='/' exact header>\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{ marginRight: 10 }} />\r\n                    Event-Partner\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/activities' name='Activities' />\r\n                <Menu.Item as={NavLink} to='/errors' name='Errors' />\r\n                <Menu.Item>\r\n                    <Button as={NavLink} to='/createActivity' positive content='Create Activity' />\r\n                </Menu.Item>\r\n                <Menu.Item position='right'>\r\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\r\n                    <Dropdown pointing='top left' text={user?.displayName} >\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link}\r\n                                to={`/profiles/${user?.username}`}\r\n                                icon='user'\r\n                                text='My Profile' />\r\n\r\n                            <Dropdown.Item\r\n                                onClick={logout}\r\n                                text='Logout'\r\n                                icon='power'\r\n                            />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport { Header, Menu } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\n\r\nexport default observer(function ActivityFilters() {\r\n    const { activityStore: { predicate, setPredicate } } = useStore();\r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{ width: '100%', marginTop: 25 }} >\r\n                <Header icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item\r\n                    content='All Activities'\r\n                    active={predicate.has('all')}\r\n                    onClick={() => setPredicate('all', 'true')}\r\n                />\r\n                <Menu.Item\r\n                    content=\"I'm going\"\r\n                    active={predicate.has('isGoing')}\r\n                    onClick={() => setPredicate('isGoing', 'true')}\r\n                />\r\n                <Menu.Item\r\n                    content=\"I'm hosting\"\r\n                    active={predicate.has('isHost')}\r\n                    onClick={() => setPredicate('isHost', 'true')}\r\n                />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar\r\n                onChange={(date) => setPredicate('startDate', date as Date)}\r\n                value={predicate.get('startDate') || new Date()}\r\n            />\r\n        </>\r\n\r\n    )\r\n\r\n})","import React, { SyntheticEvent } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { Button, Reveal } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({ profile }: Props) {\r\n    const { profileStore, userStore } = useStore();\r\n    const { updateFollowing, loading } = profileStore;\r\n\r\n    if (userStore.user?.username === profile.username) return null;\r\n\r\n    function handleFollow(e: SyntheticEvent, username: string) {\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\r\n    }\r\n\r\n    return (\r\n        <Reveal animated='move' >\r\n            <Reveal.Content visible style={{ width: '100%' }}>\r\n                <Button\r\n                    fluid\r\n                    color='teal'\r\n                    content={profile.following ? 'Following' : 'Not following'}\r\n\r\n                />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{ width: '100%' }}>\r\n                <Button fluid\r\n                    color={profile.following ? 'red' : 'green'}\r\n                    content={profile.following ? 'Unfollow' : 'Follow'}\r\n                    loading={loading}\r\n                    onClick={(e) => handleFollow(e, profile.username)}\r\n                />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Icon, Image } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileCard({ profile }: Props) {\r\n    const truncate= (str: string) =>  {\r\n        return str.length > 10 ? str.substring(0, 70) + \"...\" : str;\r\n    }\r\n\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`} >\r\n            <Image src={profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>\r\n                    <span style={{ overflow: 'hidden', textOverflow: 'ellipsis' }}>\r\n                        {profile.bio? truncate(profile.bio!) : 'No profile bio yet' }\r\n                    </span>\r\n                </Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user' />\r\n                {profile.followersCount} followers\r\n            </Card.Content>\r\n            <FollowButton profile={profile} />\r\n        </Card>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { List, Image, Popup } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../../app/models/profile\";\r\nimport ProfileCard from \"../../Profiles/ProfileCard\";\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendee({ attendees }: Props) {\r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 3\r\n    }\r\n\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup hoverable key={attendee.username} trigger={\r\n                    <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`} >\r\n                        <Image \r\n                        size='mini' \r\n                        circular src={attendee.image || '/assets/user.png'}\r\n                        bordered\r\n                        style={attendee.following ? styles : null }\r\n                        />\r\n                    </List.Item>\r\n                } >\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={attendee} />\r\n                    </Popup.Content>\r\n                </Popup>\r\n            ))}\r\n        </List>\r\n    )\r\n})","import { format } from \"date-fns\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Icon, Item, Label, Segment } from \"semantic-ui-react\";\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport ActivityListItemAttendee from \"./ActivityListItemAttendee\";\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default function ActivityListItem({ activity }: Props) {\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled &&\r\n                    <Label attached='top'\r\n                        style={{ textAlign: 'center' }}\r\n                        color='red'\r\n                        content='Cancelled' />\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image style={{ marginBottom: 3 }} size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`} >{activity.title}</Item.Header>\r\n                            <Item.Description>Hosted By <Link to={`/profiles/${activity.hostUsername}`}>\r\n                                {activity.host?.displayName}</Link>\r\n                            </Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='orange'>\r\n                                        Your are hosting this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            {activity.isGoing && !activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='green'>\r\n                                        Your are going to this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' /> {format(activity.date!, 'd MMMM yyyy -- h:mm aa')}\r\n                    <Icon name='marker' style={{ marginLeft: 10 }} /> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span> {activity.description} </span>\r\n                <Button as={Link} to={`/activities/${activity.id}`} content='View' color='teal' floated='right' />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { Fragment } from \"react\";\r\nimport { Header } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityListItem from \"./ActivityListItem\";\r\n\r\n\r\n\r\nexport default observer(function ActivityList() {\r\n    const { activityStore } = useStore();\r\n    const { groupedActivities } = activityStore;\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            {groupedActivities.map(([group, activities]) => (\r\n                <Fragment key={group} >\r\n                    <Header sub color='teal' >\r\n                        {group}\r\n                    </Header>\r\n                    {activities.map(activity => (\r\n                        <ActivityListItem key={activity.id} activity={activity} />\r\n                    ))}\r\n                </Fragment>\r\n            ))}\r\n        </>\r\n    )\r\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport { Grid, Loader } from \"semantic-ui-react\";\r\nimport { PagingParams } from \"../../../app/models/pagination\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityFilters from \"./ActivityFilters\";\r\nimport ActivityList from \"./ActivityList\";\r\nimport ActivityListItemPlaceholder from \"./ActivityListItemPlaceholder\";\r\n\r\n\r\n\r\nexport default observer(function ActivityDashboard() {\r\n    const { activityStore } = useStore();\r\n    const { loadActivities, activityRegistry, setPagingParams, pagination } = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\r\n        loadActivities().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (activityRegistry.size < 2) loadActivities();\r\n    }, [activityRegistry, loadActivities]);\r\n\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n                ) : (\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={!loadingNext && !!pagination\r\n                            && pagination.currentPage < pagination.totalPages}\r\n                        initialLoad={false}\r\n                    >\r\n                        <ActivityList />\r\n                    </InfiniteScroll>\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n\r\n    )\r\n})","import {  useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    label?: string;\r\n    type?: string;\r\n}\r\n\r\nexport default function MyTextInput(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error} >\r\n            <label> {props.label} </label>\r\n            <input {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red' > {meta.error} </Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Button, Header, Label } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\n\r\nexport default observer(function LoginForm() {\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.login(values)\r\n                .catch(error => setErrors({error: 'Invalid email or password'}))\r\n                }\r\n        >\r\n            {({handleSubmit, isSubmitting, errors}) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off' >\r\n                    <Header as='h2' content='Login to Event-Partnet' color='teal' textAlign='center' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage \r\n                        name='error' render={() => \r\n                        <Label style={{marginBottom: 10}} basic color='red' content={errors.error}  />}\r\n                    />\r\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React from \"react\";\r\nimport { Message } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({errors}: Props) {\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((err: any, i: any) => (\r\n                        <Message.Item key={i} >{err}</Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Button, Header } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from '../errors/ValidationsErrors';\r\n\r\n\r\nexport default observer(function RegisterForm() {\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{ displayName:'', username: '' ,  email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.register(values)\r\n                .catch(error => setErrors({error}))\r\n                }\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required(),\r\n                username: Yup.string().required(),\r\n                email: Yup.string().required().email(),\r\n                password: Yup.string().required(),\r\n            })}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\r\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off' >\r\n                    <Header as='h2' content='Sign Up to Event-Partnet' color='teal' textAlign='center' />\r\n                    <MyTextInput name='displayName' placeholder='Name' />\r\n                    <MyTextInput name='username' placeholder='Username' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage \r\n                        name='error' render={() => \r\n                        <ValidationErrors errors={errors.error} />}\r\n                    />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting} \r\n                    loading={isSubmitting} positive content='Register' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Container, Header, Segment, Image, Button, Divider } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport LoginForm from \"../users/LoginForm\";\r\nimport RegisterForm from \"../users/RegisterForm\";\r\n\r\nexport default observer(function HomePage() {\r\n    const { userStore, modalStore } = useStore();\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead' >\r\n            <Container text >\r\n                <Header as='h1' inverted >\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{ marginBottom: 12 }} />\r\n                    Event-Partner\r\n                </Header>\r\n                {userStore.isLoggedIn ? (\r\n                    <>\r\n                        <Header as='h2' inverted content='Welcome to Event-Partner' />\r\n                        <Button as={Link} to='/activities' size='huge' inverted >Go to Activities!</Button>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <Button\r\n                            onClick={() => modalStore.openModal(<LoginForm />)}\r\n                            size='huge' inverted >Login\r\n                        </Button>\r\n                        <Button\r\n                            onClick={() => modalStore.openModal(<RegisterForm />)}\r\n                            size='huge' inverted >Register\r\n                        </Button>\r\n                        <Divider horizontal inverted >Or</Divider>\r\n                        <Button\r\n                            size='huge'\r\n                            loading={userStore.fbLoading}\r\n                            inverted\r\n                            color='facebook'\r\n                            content='Login with Facebook'\r\n                            onClick={userStore.facebookLogin}\r\n                        />\r\n                    </>\r\n\r\n                )}\r\n            </Container>\r\n        </Segment>\r\n    )\r\n});","import React from \"react\";\r\nimport { Dimmer, Loader } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nexport default function LoadingComponent({inverted = true, content = 'Loading...'} : Props){\r\n    return (\r\n        <Dimmer active={true} inverted={inverted} >\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextArea(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error} >\r\n            <label> {props.label} </label>\r\n            <textarea {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red' > {meta.error} </Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}\r\n","export const categoryOptions = [\r\n    {text: 'Drinks', value: 'drinks'}, \r\n    {text: 'Culture', value: 'culture'}, \r\n    {text: 'Film', value: 'film'}, \r\n    {text: 'Food', value: 'food'}, \r\n    {text: 'Music', value: 'music'}, \r\n    {text: 'Travel', value: 'travel'}, \r\n\r\n]","import {  useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label, Select } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n}\r\n\r\n\r\nexport default function MySelectInput(props: Props) {\r\n    const [field, meta, helpers] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error} >\r\n        <label> {props.label} </label>\r\n        <Select \r\n            clearable\r\n            options={props.options}\r\n            value={field.value || null}\r\n            onChange={(e, d) => helpers.setValue(d.value)}\r\n            onBlur={() => helpers.setTouched(true)}\r\n            placeholder={props.placeholder}\r\n        />\r\n        {meta.touched && meta.error ? (\r\n            <Label basic color='red' > {meta.error} </Label>\r\n        ) : null}\r\n    </Form.Field>\r\n    )\r\n} ","import {  useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\r\n\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [field, meta, helpers] = useField(props.name!);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error} >\r\n            <DatePicker \r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red' > {meta.error} </Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport {  useEffect, useState } from \"react\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport { Segment, Button, Header } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport { v4 as uuid } from 'uuid';\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from \"../../../app/common/form/MyTextInput\";\r\nimport MyTextArea from \"../../../app/common/form/MyTextArea\";\r\nimport { categoryOptions } from \"../../../app/common/options/categoryOptions\";\r\nimport MySelectInput from \"../../../app/common/form/MySelectInput\";\r\nimport MyDateInput from \"../../../app/common/form/MyDateInput\";\r\nimport { ActivityFormValues } from \"../../../app/models/activity\";\r\n\r\n\r\n\r\nexport default observer(function ActivityForm() {\r\n    const history = useHistory();\r\n    const { activityStore } = useStore();\r\n    const { createActivity, updateActivity,\r\n         loadActivity, loadingInitial } = activityStore;\r\n\r\n    const { id } = useParams<{ id: string }>();\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)));\r\n\r\n    }, [id, loadActivity])\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The activity title is required'),\r\n        description: Yup.string().required('The description  is required'),\r\n        category: Yup.string().required('The category is required'),\r\n        date: Yup.string().required('The date is required').nullable(),\r\n        city: Yup.string().required('The city is required'),\r\n        venue: Yup.string().required('The venue is required'),\r\n    })\r\n\r\n\r\n    function handleFormSubmit(activity: ActivityFormValues){\r\n        if (!activity.id) {\r\n            let newActivity = {\r\n                ...activity, \r\n                id: uuid()\r\n            };\r\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`));\r\n        }\r\n        else {\r\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`));\r\n        }\r\n    }\r\n\r\n\r\n    if (id)\r\n        if (loadingInitial) return <LoadingComponent content='Loading activity...' />\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Activity Details' sub color='teal' />\r\n            <Formik enableReinitialize\r\n                initialValues={activity}\r\n                validationSchema={validationSchema}\r\n                onSubmit={values => handleFormSubmit(values)} >\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'  >\r\n                        <MyTextInput name='title' placeholder='Title' />\r\n                        <MyTextArea placeholder='Description' name='description' rows={3} />\r\n                        <MySelectInput placeholder='Category' name='category' options={categoryOptions} />\r\n                        <MyDateInput placeholderText='Date'\r\n                          name='date' \r\n                          showTimeSelect\r\n                          timeCaption='time'\r\n                          dateFormat='d  MMMM yyyy -- hh:mm'\r\n\r\n                          />\r\n                        <Header content='Location Details' sub color='teal' />\r\n                        <MyTextInput placeholder='City' name='city' />\r\n                        <MyTextInput placeholder='Venue' name='venue' />\r\n\r\n                        <Button \r\n                            loading={isSubmitting} \r\n                            floated='right' \r\n                            positive \r\n                            type='submit' \r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            content='Submit' />\r\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\r\n\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n\r\n        </Segment>\r\n    )\r\n})","import { Formik, Form, Field, FieldProps } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store'\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from 'date-fns/esm'\r\n\r\ninterface Props {\r\n    activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\r\n    const { commentStore } = useStore();\r\n\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, activityId])\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{ border: 'none' }}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Formik\r\n                    onSubmit={(values, { resetForm }) =>\r\n                        commentStore.addComment(values).then(() => resetForm())}\r\n                    initialValues={{ body: '' }}\r\n                    validationSchema={Yup.object({\r\n                        body: Yup.string().required()\r\n                    })}\r\n                >\r\n                    {({ isSubmitting, isValid, handleSubmit }) => (\r\n                        <Form className='ui form'>\r\n                            <Field name='body'>\r\n                                {(props: FieldProps) => (\r\n                                    <div style={{ position: 'relative' }} >\r\n                                        <Loader active={isSubmitting} />\r\n                                        <textarea\r\n                                            placeholder='Enter your comment (Enter to submit, Shift + Enter for new line'\r\n                                            rows={2}\r\n                                            {...props.field}\r\n                                            onKeyPress={e => {\r\n                                                if (e.key === 'Enter' && e.shiftKey)\r\n                                                    return;\r\n                                                if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                    e.preventDefault();\r\n                                                    isValid && handleSubmit()\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\r\n                            <Comment.Content>\r\n                                <Comment.Author\r\n                                    as={Link}\r\n                                    to={`/profiles/${comment.username}`} >\r\n                                    {comment.displayName}\r\n                                </Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{ whiteSpace: 'pre-wrap' }} > {comment.body} </Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n\r\n\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Item, Segment, Image, Label } from 'semantic-ui-react'\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\r\n    const { activityStore: { updateAttendance, loading, cancelActivityToggle } } = useStore();\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{ padding: '0' }}>\r\n                {activity.isCancelled && (\r\n                    <Label style={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }}\r\n                        ribbon color='red' content='Cancelled' />\r\n                )}\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{ color: 'white' }}\r\n                                />\r\n                                <p>{format(activity.date!, 'd MMMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by <strong>\r\n                                        <Link to={`/profiles/${activity.host?.username}`} >\r\n                                            {activity.host?.displayName}\r\n                                        </Link>\r\n                                    </strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button color='orange'\r\n                            floated='right'\r\n                            disabled={activity.isCancelled}\r\n                            as={Link}\r\n                            to={`/manage/${activity.id}`}>\r\n                            Manage Event\r\n                        </Button>\r\n                        <Button loading={loading}\r\n                            floated='left'\r\n                            color={activity.isCancelled ? 'green' : 'red'}\r\n                            onClick={cancelActivityToggle}>\r\n                            {activity.isCancelled ? 'Reactivate' : 'Cancel Event'}\r\n                        </Button>\r\n                    </>\r\n\r\n                ) : activity.isGoing ? (\r\n                    <Button loading={loading} onClick={updateAttendance}>\r\n                        Cancel attendance\r\n                    </Button>\r\n                ) : (\r\n                    <Button disabled={activity.isCancelled}\r\n                        color='teal' loading={loading}\r\n                        onClick={updateAttendance} >\r\n                        Join Activity\r\n                    </Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Segment, Grid, Icon } from 'semantic-ui-react'\r\nimport { Activity } from \"../../../app/models/activity\";\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({ activity }: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <span>\r\n                            {format(activity.date!, 'd MMMM yyyy -- h:mm aa')}\r\n                        </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity';\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\n\r\nexport default observer(function ActivityDetailedSidebar({ activity: {attendees, host} }: Props) {\r\n    if (!attendees) return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person ' : 'People '} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n                        <Item key={attendee.username} style={{ position: 'relative' }}>\r\n                            {attendee.username === host?.username && \r\n                            <Label\r\n                                style={{ position: 'absolute' }}\r\n                                color='orange'\r\n                                ribbon='right'\r\n                            >\r\n                                Host\r\n                            </Label>}\r\n                            <Image size='tiny' src={attendee.image ||  '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                {attendee.following && \r\n                                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport {  useParams } from \"react-router-dom\";\r\nimport {  Grid} from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityDetailedChat from \"./ActivityDetailedChat\";\r\nimport ActivityDetailedHeader from \"./ActivityDetailedHeader\";\r\nimport ActivityDetailedInfo from \"./ActivityDetailedInfo\";\r\nimport ActivityDetailedSidebar from \"./ActivityDetailedSidebar\";\r\n\r\n\r\n\r\nexport default observer( function ActivityDetails() {\r\n    const {activityStore} = useStore();\r\n    const {selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity} = activityStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id);\r\n        return () => clearSelectedActivity();\r\n    }, [id, loadActivity, clearSelectedActivity]);\r\n\r\n    if (loadingInitial || !activity) return <LoadingComponent /> ;\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailedHeader activity={activity} />\r\n                <ActivityDetailedInfo activity={activity} />\r\n                <ActivityDetailedChat activityId={activity.id} />\r\n            </Grid.Column>\r\n            <Grid.Column width={6} >\r\n                <ActivityDetailedSidebar activity={activity} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})\r\n","import React, { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationsErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n    const [errors, setErrors] = useState(null);\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors && \r\n                <ValidationErrors errors={errors} />\r\n            }\r\n        </>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\";\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Opps we've looked everywhere and could not find this!\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary >Back to activities</Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Container, Header, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nexport default observer(function ServerError() {\r\n    const {commonStore} = useStore();\r\n    return(\r\n        <Container>\r\n            <Header as='h1' content='Server Error' />\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\r\n            {commonStore.error?.details && \r\n                <Segment>\r\n                    <Header as='h4' content='Stack trace' color='teal' />\r\n                    <code style={{marginTop: '10px'}} >{ commonStore.error.details }</code>\r\n                </Segment>\r\n            }\r\n        </Container>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Modal } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../stores/store\";\r\n\r\n\r\nexport default observer(function ModalContainer() {\r\n    const {modalStore} = useStore();\r\n\r\n    return (\r\n        <Modal \r\n        open={modalStore.modal.open} \r\n        onClose={modalStore.closeModal}\r\n        size='mini'\r\n        >\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import React, {useCallback} from 'react'\r\nimport {useDropzone} from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({setFiles}: Props) {\r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadius: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center' ,\r\n        height: 200\r\n    }\r\n\r\n    const dzActive = {\r\n        borderColor: 'green'\r\n    }\r\n\r\n  const onDrop = useCallback(acceptedFiles => {\r\n    setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n        preview: URL.createObjectURL(file)\r\n    })))\r\n  }, [setFiles])\r\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n\r\n  return (\r\n    <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles } >\r\n      <input {...getInputProps()} />\r\n      <Icon name='upload' size='huge' />\r\n      <Header content='Drop image here' />\r\n    </div>\r\n  )\r\n}","import React from \"react\";\r\nimport {Cropper} from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css'\r\n\r\ninterface Props {\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props) {\r\n    return (\r\n        <Cropper \r\n          src={imagePreview}  \r\n          style={{height: 200, width: '100%'}}\r\n          initialAspectRatio={1}\r\n          aspectRatio={1}\r\n          preview='.img-preview'\r\n          guides={false}\r\n          viewMode={1}\r\n          autoCropArea={1}\r\n          background={false}\r\n          onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    )\r\n} ","import React, { useEffect, useState } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport Grid from \"semantic-ui-react/dist/commonjs/collections/Grid\";\r\nimport { Button, Header } from \"semantic-ui-react\";\r\nimport PhotoWidgetDropzone from \"./PhotoWidgetDropzone\";\r\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\r\n\r\ninterface Props {\r\n    uploadPhoto: (file: Blob) => void;\r\n    loading: boolean;\r\n}\r\n\r\nexport default observer(function PhotoUploadWidget({uploadPhoto, loading}: Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blop => uploadPhoto(blop!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            //clean up and dispose of preview file\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\r\n        }\r\n    }, [files])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 2 - Resize image' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\r\n                {files && files.length > 0 && \r\n                <>\r\n                    <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\r\n                    <Button.Group widths={2}>\r\n                        <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                        <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                    </Button.Group>\r\n                </>}\r\n\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React, { SyntheticEvent, useState } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Card, Header, Tab, Image, Grid, Button } from \"semantic-ui-react\";\r\nimport { Photo, Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport PhotoUploadWidget from \"../../app/common/imageUpload/PhotoUploadWidget\";\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nexport default observer(function ProfilePhotos({ profile }: Props) {\r\n    const { profileStore: { isCurrentUser, uploadPhoto, \r\n        uploading, loadingPhoto, setMainPhoto, deletePhoto } } = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, settarget] = useState('')\r\n\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>){\r\n        settarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        settarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {isCurrentUser &&\r\n                        <Button floated='right' basic\r\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    }\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\r\n                    )\r\n                        : (\r\n                            <Card.Group itemsPerRow={5}>\r\n                                {profile.photos?.map(photo => (\r\n                                    <Card key={photo.id} >\r\n                                        <Image src={photo.url} />\r\n                                        {isCurrentUser && (\r\n                                            <Button.Group fluid widths={2}>\r\n                                                <Button \r\n                                                    basic\r\n                                                    color='green'\r\n                                                    content='Main'\r\n                                                    name={ 'main' + photo.id}\r\n                                                    disabled={photo.isMain}\r\n                                                    loading={target ===  'main' + photo.id && loadingPhoto}\r\n                                                    onClick={e => handleSetMainPhoto(photo, e)}\r\n                                                />\r\n                                                <Button \r\n                                                    basic\r\n                                                    color='red'\r\n                                                    icon='trash'\r\n                                                    name={photo.id}\r\n                                                    disabled={photo.isMain}\r\n                                                    loading={target === photo.id && loadingPhoto}\r\n                                                    onClick={e => handleDeletePhoto(photo, e)}\r\n                                                />\r\n                                            </Button.Group>\r\n                                        )}\r\n                                    </Card>\r\n                                ))}\r\n\r\n                            </Card.Group>\r\n                        )\r\n                    }\r\n                </Grid.Column>\r\n            </Grid>\r\n\r\n\r\n        </Tab.Pane>\r\n    )\r\n})","import React, { useEffect, useState } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button, Form, Grid } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport { Profile, ProfileFormValues } from \"../../app/models/profile\";\r\nimport { Formik } from \"formik\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport MyTextArea from \"../../app/common/form/MyTextArea\";\r\nimport * as Yup from 'yup';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n    editMode: boolean;\r\n}\r\n\r\nexport default observer(function EditProfileForm({profile, editMode}: Props) {\r\n    const { profileStore: {  updateProfile } } = useStore();\r\n    const [profileValues, setProfileValues] = useState<ProfileFormValues>(new ProfileFormValues(profile));\r\n\r\n\r\n    const validationSchema = Yup.object({\r\n        displayName: Yup.string().required('The display name is required'),\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (profile){\r\n            setProfileValues(new ProfileFormValues(profile) )\r\n        }\r\n    }, [profile])\r\n\r\n    function handleFormSubmit(values: ProfileFormValues){\r\n        updateProfile(values);\r\n        editMode = false;\r\n    }\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                <Formik enableReinitialize\r\n                    initialValues={profileValues}\r\n                    validationSchema={validationSchema}\r\n                    onSubmit={values => handleFormSubmit(values)} \r\n                >\r\n                    {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MyTextInput name='displayName' placeholder='Display Name' />\r\n                        <MyTextArea placeholder='Bio' name='bio' rows={3} />\r\n                        <Button \r\n                            loading={isSubmitting} \r\n                            floated='right' \r\n                            positive \r\n                            type='submit' \r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            content='Submit' />\r\n                    </Form>\r\n                    )}\r\n                </Formik>\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})\r\n","import React, { useState } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button, Header, Tab } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport EditProfileForm from \"./EditProfileForm\";\r\n\r\ninterface Props {\r\n        profile: Profile\r\n}\r\n\r\nexport default observer(function ProfileAbout({ profile }: Props) {\r\n        const { profileStore: { isCurrentUser } } = useStore();\r\n        const [editMode, setEditMode] = useState(false);\r\n\r\n        return (\r\n                <Tab.Pane>\r\n                        {isCurrentUser &&\r\n                                <Button\r\n                                        basic\r\n                                        content={editMode ? 'Cancel' : 'Edit Profile'}\r\n                                        floated='right'\r\n                                        onClick={() => setEditMode(!editMode)}\r\n                                />}\r\n                        {!editMode &&\r\n                                <>\r\n                                        <Header as='h3' content={'About ' + profile.displayName} />\r\n                                        <p style={{ whiteSpace: 'pre-wrap' }} \r\n                                        >{profile.bio}</p>\r\n                                </>\r\n                        }\r\n                        {editMode && \r\n                                <EditProfileForm profile={profile} editMode={editMode} />\r\n\r\n                        }\r\n                </Tab.Pane>\r\n        )\r\n})","import React from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport { Card, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport ProfileCard from \"./ProfileCard\";\r\n\r\n\r\n\r\nexport default observer(function ProfileFollowings() {\r\n    const { profileStore } = useStore();\r\n    const { profile, followings, loadingFollowings, activeTab } = profileStore;\r\n\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingFollowings} >\r\n            <Grid>\r\n                <Grid.Column width={16} >\r\n                    <Header\r\n                        floated='left'\r\n                        icon='user'\r\n                        content={activeTab === 3 ?  `People following ${profile?.displayName}` : `People ${profile?.displayName} is following`}\r\n                    />\r\n                </Grid.Column>\r\n                <Grid.Column width={16} >\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map(profile => (\r\n                            <ProfileCard key={profile.username} profile={profile} /> \r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React, { SyntheticEvent, useEffect } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport { Card, Grid, Header, Tab, TabProps, Image } from \"semantic-ui-react\";\r\nimport { UserActivity } from \"../../app/models/profile\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { format } from 'date-fns';\r\n\r\nexport default observer(function ProfileActivities() {\r\n    const { profileStore: { loadUserActivites, userActivities, loadingActivities, profile } } = useStore();\r\n\r\n    const panes = [\r\n        { menuItem: 'Future Events', pane: { key: 'future' } },\r\n        { menuItem: 'Past Events', pane: { key: 'past' } },\r\n        { menuItem: 'Hosting', pane: { key: 'hosting' } }\r\n    ];\r\n\r\n    useEffect(() => {\r\n        loadUserActivites(profile!.username);\r\n    }, [loadUserActivites, profile]);\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivites(profile!.username, panes[data.activeIndex as\r\n            number].pane.key);\r\n    };\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar' content={'Activities'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        panes={panes}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities.map((activity: UserActivity) => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`/activities/${activity.activityId}`}\r\n                                key={activity.activityId}\r\n                            >\r\n                                <Image\r\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\r\n\r\n                                    style={{\r\n                                        minHeight: 100, objectFit:\r\n                                            'cover'\r\n                                    }}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header\r\n                                        textAlign='center'>{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(activity.date),\r\n                                            'do LLL')}</div>\r\n                                        <div>{format(new Date(activity.date),\r\n                                            'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Tab } from \"semantic-ui-react\";\r\nimport ProfilePhotos from \"./ProfilePhotos\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport ProfileAbout from \"./ProfileAbout\";\r\nimport ProfileFollowings from \"./ProfileFollowings\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileActivites from \"./ProfileActivites\";\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nexport default observer (function ProfileContent({profile}: Props) {\r\n    const {profileStore} = useStore();\r\n\r\n    const panes = [\r\n        {menuItem: 'About', render: () => <ProfileAbout profile={profile} /> },\r\n        {menuItem: 'Photos', render: () => < ProfilePhotos profile={profile} />},\r\n        {menuItem: 'Events', render: () => <ProfileActivites />},\r\n        {menuItem: 'Followers', render: () => <ProfileFollowings /> },\r\n        {menuItem: 'Following', render: () => <ProfileFollowings />},\r\n    ]\r\n    return (\r\n        <Tab \r\n            menu={{fluid: true, vertical: true}}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport {  Divider, Grid, Header, Item, Segment, Statistic } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nexport default observer(function ProfileHeader({profile}: Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={ profile.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4} >\r\n                    <Statistic.Group widths={2} >\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileContent from \"./ProfileContent\";\r\nimport ProfileHeader from \"./ProfileHeader\";\r\n\r\n\r\nexport default observer(function ProfilePage() {\r\n    const { username } = useParams<{ username: string }>();\r\n    const { profileStore } = useStore();\r\n    const { loadingProfile, loadProfile, profile, setActiveTab } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n        return () => {\r\n            setActiveTab(0);\r\n        }\r\n    }, [loadProfile, username, setActiveTab])\r\n\r\n    if (loadingProfile) return <LoadingComponent content='Loading profile...' />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile &&\r\n                    <>\r\n                        <ProfileHeader profile={profile} />\r\n                        <ProfileContent profile={profile} />\r\n                    </>\r\n                }\r\n            </Grid.Column>\r\n        </Grid>\r\n\r\n    )\r\n})","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\r\n    const {userStore: {isLoggedIn}} = useStore();\r\n    return (\r\n        <Route \r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' /> }\r\n        />\r\n    )\r\n\r\n}","import React, { useEffect } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router-dom';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport TestErrors from '../../features/errors/TestError';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/Profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\nfunction App() {\n  const location = useLocation();\n  const {commonStore, userStore} = useStore();\n\n  useEffect(() => {\n    if (commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\n    } else {\n      userStore.getFacebookLoginStatus().then(() => {\n        commonStore.setAppLoaded();\n      })\n    }\n  }, [commonStore, userStore])\n\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\n\n  return (\n    <>\n      <ToastContainer position='bottom-right' hideProgressBar />\n      <ModalContainer />\n      <Route exact path='/' component={HomePage} />\n      <Route\n        path={'/(.+)'}\n        render={() => (\n          <>\n            <NavBar />\n            <Container style={{ marginTop: '7em' }} >\n              <Switch>\n                <PrivateRoute path='/activities' exact component={ActivityDashboard} />\n                <PrivateRoute path='/activities/:id' component={ActivityDetails} />\n                <PrivateRoute path={['/createActivity', '/manage/:id']} key={location.key} component={ActivityForm} />\n                <PrivateRoute path='/profiles/:username' component={ProfilePage} />\n                <PrivateRoute path='/errors' component={TestErrors} />\n                <Route path='/server-error' component={ServerError} />\n                <Route component={NotFound} />\n              </Switch>\n            </Container>\n          </>\n        )}\n      />\n\n    </>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\n\r\nexport default function ScrollToTop() {\r\n    const {pathname} = useLocation();\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n    }, [pathname])\r\n    return null;\r\n} ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport {createBrowserHistory} from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value={store} >\n    <Router history={history}>\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>\n    ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}